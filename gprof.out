Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 35.15      6.21     6.21 11356074     0.00     0.00  KSolveState::RecordState(unsigned int)
 11.52      8.25     2.04  3721135     0.00     0.00  Game::AvailableMoves() const
 10.02     10.02     1.77 12961046     0.00     0.00  GameState::GameState(Game const&)
  9.34     11.67     1.65  2241324     0.00     0.00  MoveStorage::FetchMoveSequence()
  7.33     12.96     1.30 13990990     0.00     0.00  Game::MinimumMovesLeft() const
  6.82     14.17     1.21 71344443     0.00     0.00  Game::MakeMove(Move)
  3.03     14.70     0.54 49242587     0.00     0.00  Pile::Pop(unsigned int)
  2.89     15.21     0.51  2410099     0.00     0.00  Game::Deal()
  2.60     15.67     0.46 38514268     0.00     0.00  Pile::Draw(Pile&, int)
  2.43     16.10     0.43        1     0.43    17.61  KSolveWorker(KSolveState*)
  1.53     16.37     0.27  5742712     0.00     0.00  MoveStorage::File(unsigned int)
  1.42     16.62     0.25 12392370     0.00     0.00  Game::UnMakeMove(Move)
  1.36     16.86     0.24 11986892     0.00     0.00  MoveStorage::Pop()
  1.10     17.06     0.20 16248420     0.00     0.00  KSolveState::SkippableMove(Move)
  0.96     17.23     0.17  3752556     0.00     0.00  KSolveState::FilteredAvailableMoves()
  0.85     17.38     0.15  2218981     0.00     0.00  KSolveState::MakeAutoMoves()
  0.79     17.52     0.14 12895274     0.00     0.00  MoveStorage::Push(Move)
  0.51     17.61     0.09  5440900     0.00     0.00  phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::prepare_insert(unsigned long)
  0.23     17.65     0.04        1     0.04     0.04  SharedMoveStorage::~SharedMoveStorage()
  0.08     17.66     0.02                             __tcf_0
  0.03     17.67     0.01                             Game::Game(std::vector<Card, std::allocator<Card> > const&, unsigned int, unsigned int)
  0.03     17.67     0.01                             MoveStorage::MovesVector() const
  0.00     17.67     0.00   357193     0.00     0.00  Game::GameOver() const
  0.00     17.67     0.00     1000     0.00     0.00  Random::CalculateNext()
  0.00     17.67     0.00      278     0.00     0.00  void std::vector<unsigned int*, std::allocator<unsigned int*> >::_M_realloc_insert<unsigned int* const&>(__gnu_cxx::__normal_iterator<unsigned int**, std::vector<unsigned int*, std::allocator<unsigned int*> > >, unsigned int* const&)
  0.00     17.67     0.00      106     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
  0.00     17.67     0.00       52     0.00     0.00  CardFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
  0.00     17.67     0.00       52     0.00     0.00  Card::FromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
  0.00     17.67     0.00       16     0.00     0.00  phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::resize(unsigned long)
  0.00     17.67     0.00       16     0.00     0.00  void std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> >::_M_realloc_insert<SharedMoveStorage::MoveNode* const&>(__gnu_cxx::__normal_iterator<SharedMoveStorage::MoveNode**, std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> > >, SharedMoveStorage::MoveNode* const&)
  0.00     17.67     0.00        3     0.00     0.00  Game::Game(Game const&)
  0.00     17.67     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z8LoadDeckRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERj
  0.00     17.67     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZNK4Card8AsStringB5cxx11Ev
  0.00     17.67     0.00        1     0.00     0.00  DeckLoader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int const*)
  0.00     17.67     0.00        1     0.00     0.00  PysolDeck(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
  0.00     17.67     0.00        1     0.00     0.00  KSolveState::CheckForMinSolution()
  0.00     17.67     0.00        1     0.00     0.00  Random::SetSeed(int)
  0.00     17.67     0.00        1     0.00     0.00  void std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> >::_M_realloc_insert<mf_vector<unsigned int>* const&>(__gnu_cxx::__normal_iterator<mf_vector<unsigned int>**, std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> > >, mf_vector<unsigned int>* const&)
  0.00     17.67     0.00        1     0.00     0.00  void std::vector<std::mutex*, std::allocator<std::mutex*> >::_M_realloc_insert<std::mutex* const&>(__gnu_cxx::__normal_iterator<std::mutex**, std::vector<std::mutex*, std::allocator<std::mutex*> > >, std::mutex* const&)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.06% of 17.67 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.9    0.00   17.65                 KSolve(Game&, unsigned int) [1]
                0.43   17.18       1/1           KSolveWorker(KSolveState*) [2]
                0.04    0.00       1/1           SharedMoveStorage::~SharedMoveStorage() [20]
                0.00    0.00       1/13990990     Game::MinimumMovesLeft() const [10]
                0.00    0.00       1/5742712     MoveStorage::File(unsigned int) [15]
                0.00    0.00      16/16          phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::resize(unsigned long) [37]
                0.00    0.00       1/3           Game::Game(Game const&) [39]
-----------------------------------------------
                0.43   17.18       1/1           KSolve(Game&, unsigned int) [1]
[2]     99.6    0.43   17.18       1         KSolveWorker(KSolveState*) [2]
                6.21    2.13 11356074/11356074     KSolveState::RecordState(unsigned int) [3]
                0.15    2.45 2218981/2218981     KSolveState::MakeAutoMoves() [4]
                1.18    0.84 70043636/71344443     Game::MakeMove(Move) [6]
                1.65    0.00 2241324/2241324     MoveStorage::FetchMoveSequence() [9]
                1.30    0.00 13990989/13990990     Game::MinimumMovesLeft() const [10]
                0.51    0.00 2410099/2410099     Game::Deal() [12]
                0.25    0.14 12392370/12392370     Game::UnMakeMove(Move) [14]
                0.24    0.00 11986892/11986892     MoveStorage::Pop() [16]
                0.13    0.00 11580490/12895274     MoveStorage::Push(Move) [18]
                0.00    0.00  357193/357193      Game::GameOver() const [31]
                0.00    0.00       2/3           Game::Game(Game const&) [39]
                0.00    0.00       1/1           KSolveState::CheckForMinSolution() [44]
-----------------------------------------------
                6.21    2.13 11356074/11356074     KSolveWorker(KSolveState*) [2]
[3]     47.2    6.21    2.13 11356074         KSolveState::RecordState(unsigned int) [3]
                1.77    0.00 12961046/12961046     GameState::GameState(Game const&) [8]
                0.27    0.00 5742711/5742712     MoveStorage::File(unsigned int) [15]
                0.09    0.00 5440900/5440900     phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::prepare_insert(unsigned long) [19]
-----------------------------------------------
                0.15    2.45 2218981/2218981     KSolveWorker(KSolveState*) [2]
[4]     14.7    0.15    2.45 2218981         KSolveState::MakeAutoMoves() [4]
                0.17    2.23 3752556/3752556     KSolveState::FilteredAvailableMoves() [5]
                0.02    0.02 1300807/71344443     Game::MakeMove(Move) [6]
                0.01    0.00 1314784/12895274     MoveStorage::Push(Move) [18]
-----------------------------------------------
                0.17    2.23 3752556/3752556     KSolveState::MakeAutoMoves() [4]
[5]     13.6    0.17    2.23 3752556         KSolveState::FilteredAvailableMoves() [5]
                2.04    0.00 3721135/3721135     Game::AvailableMoves() const [7]
                0.20    0.00 16248420/16248420     KSolveState::SkippableMove(Move) [17]
-----------------------------------------------
                0.02    0.02 1300807/71344443     KSolveState::MakeAutoMoves() [4]
                1.18    0.84 70043636/71344443     KSolveWorker(KSolveState*) [2]
[6]     11.6    1.21    0.85 71344443         Game::MakeMove(Move) [6]
                0.48    0.00 44073872/49242587     Pile::Pop(unsigned int) [11]
                0.37    0.00 31106111/38514268     Pile::Draw(Pile&, int) [13]
-----------------------------------------------
                2.04    0.00 3721135/3721135     KSolveState::FilteredAvailableMoves() [5]
[7]     11.5    2.04    0.00 3721135         Game::AvailableMoves() const [7]
-----------------------------------------------
                1.77    0.00 12961046/12961046     KSolveState::RecordState(unsigned int) [3]
[8]     10.0    1.77    0.00 12961046         GameState::GameState(Game const&) [8]
-----------------------------------------------
                1.65    0.00 2241324/2241324     KSolveWorker(KSolveState*) [2]
[9]      9.3    1.65    0.00 2241324         MoveStorage::FetchMoveSequence() [9]
-----------------------------------------------
                0.00    0.00       1/13990990     KSolve(Game&, unsigned int) [1]
                1.30    0.00 13990989/13990990     KSolveWorker(KSolveState*) [2]
[10]     7.3    1.30    0.00 13990990         Game::MinimumMovesLeft() const [10]
-----------------------------------------------
                0.06    0.00 5168715/49242587     Game::UnMakeMove(Move) [14]
                0.48    0.00 44073872/49242587     Game::MakeMove(Move) [6]
[11]     3.0    0.54    0.00 49242587         Pile::Pop(unsigned int) [11]
-----------------------------------------------
                0.51    0.00 2410099/2410099     KSolveWorker(KSolveState*) [2]
[12]     2.9    0.51    0.00 2410099         Game::Deal() [12]
-----------------------------------------------
                0.09    0.00 7408157/38514268     Game::UnMakeMove(Move) [14]
                0.37    0.00 31106111/38514268     Game::MakeMove(Move) [6]
[13]     2.6    0.46    0.00 38514268         Pile::Draw(Pile&, int) [13]
-----------------------------------------------
                0.25    0.14 12392370/12392370     KSolveWorker(KSolveState*) [2]
[14]     2.2    0.25    0.14 12392370         Game::UnMakeMove(Move) [14]
                0.09    0.00 7408157/38514268     Pile::Draw(Pile&, int) [13]
                0.06    0.00 5168715/49242587     Pile::Pop(unsigned int) [11]
-----------------------------------------------
                0.00    0.00       1/5742712     KSolve(Game&, unsigned int) [1]
                0.27    0.00 5742711/5742712     KSolveState::RecordState(unsigned int) [3]
[15]     1.5    0.27    0.00 5742712         MoveStorage::File(unsigned int) [15]
                0.00    0.00     278/278         void std::vector<unsigned int*, std::allocator<unsigned int*> >::_M_realloc_insert<unsigned int* const&>(__gnu_cxx::__normal_iterator<unsigned int**, std::vector<unsigned int*, std::allocator<unsigned int*> > >, unsigned int* const&) [33]
                0.00    0.00       1/1           void std::vector<std::mutex*, std::allocator<std::mutex*> >::_M_realloc_insert<std::mutex* const&>(__gnu_cxx::__normal_iterator<std::mutex**, std::vector<std::mutex*, std::allocator<std::mutex*> > >, std::mutex* const&) [47]
                0.00    0.00       1/1           void std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> >::_M_realloc_insert<mf_vector<unsigned int>* const&>(__gnu_cxx::__normal_iterator<mf_vector<unsigned int>**, std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> > >, mf_vector<unsigned int>* const&) [46]
-----------------------------------------------
                0.24    0.00 11986892/11986892     KSolveWorker(KSolveState*) [2]
[16]     1.4    0.24    0.00 11986892         MoveStorage::Pop() [16]
-----------------------------------------------
                0.20    0.00 16248420/16248420     KSolveState::FilteredAvailableMoves() [5]
[17]     1.1    0.20    0.00 16248420         KSolveState::SkippableMove(Move) [17]
-----------------------------------------------
                0.01    0.00 1314784/12895274     KSolveState::MakeAutoMoves() [4]
                0.13    0.00 11580490/12895274     KSolveWorker(KSolveState*) [2]
[18]     0.8    0.14    0.00 12895274         MoveStorage::Push(Move) [18]
                0.00    0.00      16/16          void std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> >::_M_realloc_insert<SharedMoveStorage::MoveNode* const&>(__gnu_cxx::__normal_iterator<SharedMoveStorage::MoveNode**, std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> > >, SharedMoveStorage::MoveNode* const&) [38]
-----------------------------------------------
                0.09    0.00 5440900/5440900     KSolveState::RecordState(unsigned int) [3]
[19]     0.5    0.09    0.00 5440900         phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::prepare_insert(unsigned long) [19]
-----------------------------------------------
                0.04    0.00       1/1           KSolve(Game&, unsigned int) [1]
[20]     0.2    0.04    0.00       1         SharedMoveStorage::~SharedMoveStorage() [20]
-----------------------------------------------
                                                 <spontaneous>
[21]     0.1    0.02    0.00                 __tcf_0 [21]
-----------------------------------------------
                                                 <spontaneous>
[22]     0.0    0.01    0.00                 Game::Game(std::vector<Card, std::allocator<Card> > const&, unsigned int, unsigned int) [22]
-----------------------------------------------
                                                 <spontaneous>
[23]     0.0    0.01    0.00                 MoveStorage::MovesVector() const [23]
-----------------------------------------------
                0.00    0.00  357193/357193      KSolveWorker(KSolveState*) [2]
[31]     0.0    0.00    0.00  357193         Game::GameOver() const [31]
-----------------------------------------------
                0.00    0.00    1000/1000        Random::SetSeed(int) [45]
[32]     0.0    0.00    0.00    1000         Random::CalculateNext() [32]
-----------------------------------------------
                0.00    0.00     278/278         MoveStorage::File(unsigned int) [15]
[33]     0.0    0.00    0.00     278         void std::vector<unsigned int*, std::allocator<unsigned int*> >::_M_realloc_insert<unsigned int* const&>(__gnu_cxx::__normal_iterator<unsigned int**, std::vector<unsigned int*, std::allocator<unsigned int*> > >, unsigned int* const&) [33]
-----------------------------------------------
                0.00    0.00       1/106         LoadDeck(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&) [61]
                0.00    0.00      52/106         Card::FromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [36]
                0.00    0.00      53/106         DeckLoader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int const*) [42]
[34]     0.0    0.00    0.00     106         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [34]
-----------------------------------------------
                0.00    0.00      52/52          DeckLoader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int const*) [42]
[35]     0.0    0.00    0.00      52         CardFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [35]
                0.00    0.00      52/52          Card::FromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [36]
-----------------------------------------------
                0.00    0.00      52/52          CardFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [35]
[36]     0.0    0.00    0.00      52         Card::FromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [36]
                0.00    0.00      52/106         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [34]
-----------------------------------------------
                0.00    0.00      16/16          KSolve(Game&, unsigned int) [1]
[37]     0.0    0.00    0.00      16         phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::resize(unsigned long) [37]
-----------------------------------------------
                0.00    0.00      16/16          MoveStorage::Push(Move) [18]
[38]     0.0    0.00    0.00      16         void std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> >::_M_realloc_insert<SharedMoveStorage::MoveNode* const&>(__gnu_cxx::__normal_iterator<SharedMoveStorage::MoveNode**, std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> > >, SharedMoveStorage::MoveNode* const&) [38]
-----------------------------------------------
                0.00    0.00       1/3           KSolve(Game&, unsigned int) [1]
                0.00    0.00       2/3           KSolveWorker(KSolveState*) [2]
[39]     0.0    0.00    0.00       3         Game::Game(Game const&) [39]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [87]
[40]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z8LoadDeckRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERj [40]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [87]
[41]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZNK4Card8AsStringB5cxx11Ev [41]
-----------------------------------------------
                0.00    0.00       1/1           PysolDeck(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [43]
[42]     0.0    0.00    0.00       1         DeckLoader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int const*) [42]
                0.00    0.00      53/106         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [34]
                0.00    0.00      52/52          CardFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [35]
-----------------------------------------------
                0.00    0.00       1/1           LoadDeck(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int&) [61]
[43]     0.0    0.00    0.00       1         PysolDeck(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [43]
                0.00    0.00       1/1           DeckLoader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int const*) [42]
-----------------------------------------------
                0.00    0.00       1/1           KSolveWorker(KSolveState*) [2]
[44]     0.0    0.00    0.00       1         KSolveState::CheckForMinSolution() [44]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [87]
[45]     0.0    0.00    0.00       1         Random::SetSeed(int) [45]
                0.00    0.00    1000/1000        Random::CalculateNext() [32]
-----------------------------------------------
                0.00    0.00       1/1           MoveStorage::File(unsigned int) [15]
[46]     0.0    0.00    0.00       1         void std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> >::_M_realloc_insert<mf_vector<unsigned int>* const&>(__gnu_cxx::__normal_iterator<mf_vector<unsigned int>**, std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> > >, mf_vector<unsigned int>* const&) [46]
-----------------------------------------------
                0.00    0.00       1/1           MoveStorage::File(unsigned int) [15]
[47]     0.0    0.00    0.00       1         void std::vector<std::mutex*, std::allocator<std::mutex*> >::_M_realloc_insert<std::mutex* const&>(__gnu_cxx::__normal_iterator<std::mutex**, std::vector<std::mutex*, std::allocator<std::mutex*> > >, std::mutex* const&) [47]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [40] _GLOBAL__sub_I__Z8LoadDeckRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERj (KSolver.cpp) [15] MoveStorage::File(unsigned int) [32] Random::CalculateNext()
  [41] _GLOBAL__sub_I__ZNK4Card8AsStringB5cxx11Ev (Game.cpp) [18] MoveStorage::Push(Move) [45] Random::SetSeed(int)
  [42] DeckLoader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int const*) [20] SharedMoveStorage::~SharedMoveStorage() [8] GameState::GameState(Game const&)
   [2] KSolveWorker(KSolveState*) [36] Card::FromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [23] MoveStorage::MovesVector() const
  [35] CardFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [14] Game::UnMakeMove(Move) [7] Game::AvailableMoves() const
  [43] PysolDeck(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [12] Game::Deal() [10] Game::MinimumMovesLeft() const
   [3] KSolveState::RecordState(unsigned int) [6] Game::MakeMove(Move) [31] Game::GameOver() const
   [4] KSolveState::MakeAutoMoves() [39] Game::Game(Game const&) [46] void std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> >::_M_realloc_insert<mf_vector<unsigned int>* const&>(__gnu_cxx::__normal_iterator<mf_vector<unsigned int>**, std::vector<mf_vector<unsigned int>*, std::allocator<mf_vector<unsigned int>*> > >, mf_vector<unsigned int>* const&)
  [17] KSolveState::SkippableMove(Move) [22] Game::Game(std::vector<Card, std::allocator<Card> > const&, unsigned int, unsigned int) [38] void std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> >::_M_realloc_insert<SharedMoveStorage::MoveNode* const&>(__gnu_cxx::__normal_iterator<SharedMoveStorage::MoveNode**, std::vector<SharedMoveStorage::MoveNode*, std::allocator<SharedMoveStorage::MoveNode*> > >, SharedMoveStorage::MoveNode* const&)
  [44] KSolveState::CheckForMinSolution() [11] Pile::Pop(unsigned int) [47] void std::vector<std::mutex*, std::allocator<std::mutex*> >::_M_realloc_insert<std::mutex* const&>(__gnu_cxx::__normal_iterator<std::mutex**, std::vector<std::mutex*, std::allocator<std::mutex*> > >, std::mutex* const&)
   [5] KSolveState::FilteredAvailableMoves() [13] Pile::Draw(Pile&, int) [33] void std::vector<unsigned int*, std::allocator<unsigned int*> >::_M_realloc_insert<unsigned int* const&>(__gnu_cxx::__normal_iterator<unsigned int**, std::vector<unsigned int*, std::allocator<unsigned int*> > >, unsigned int* const&)
   [9] MoveStorage::FetchMoveSequence() [19] phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::prepare_insert(unsigned long) [34] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
  [16] MoveStorage::Pop()     [37] phmap::priv::raw_hash_set<phmap::priv::FlatHashMapPolicy<GameState, unsigned short>, Hasher, phmap::EqualTo<GameState>, std::allocator<std::pair<GameState, unsigned short> > >::resize(unsigned long) [21] __tcf_0 (Game.cpp)
