Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 13.31      0.35     0.35  6312412     0.00     0.00  unsigned long gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::_find_key<KSolveNames::GameState>(KSolveNames::GameState const&, unsigned long)
  8.37      0.57     0.22  4075079     0.00     0.00  KSolveNames::GameState::operator==(KSolveNames::GameState const&) const
  6.46      0.74     0.17 153560457     0.00     0.00  KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&)
  5.70      0.89     0.15 44186884     0.00     0.00  KSolveNames::DeflateTableau(KSolveNames::Pile const&)
  4.94      1.02     0.13  3151978     0.00     0.00  decltype (::new ((void*)(0)) KSolveNames::GameState((declval<KSolveNames::GameState const&>)())) std::construct_at<KSolveNames::GameState, KSolveNames::GameState const&>(KSolveNames::GameState*, KSolveNames::GameState const&)
  3.80      1.12     0.10 229752050     0.00     0.00  frystl::static_vector<KSolveNames::Card, 24u>::back()
  3.23      1.21     0.09 29229849     0.00     0.00  KSolveNames::Game::MakeMove(KSolveNames::MoveSpec)
  3.04      1.28     0.08 41065164     0.00     0.00  std::ranges::drop_view<std::ranges::ref_view<KSolveNames::Pile const> >::begin() const
  3.04      1.36     0.08   927590     0.00     0.00  KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const
  3.04      1.45     0.08   924736     0.00     0.00  KSolveNames::MoveStorage::LoadMoveSequence()
  2.66      1.51     0.07 153560457     0.00     0.00  frystl::static_vector<KSolveNames::Card, 24u>::pop_back()
  2.66      1.58     0.07 41065164     0.00     0.00  std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::Card const*, KSolveNames::Card const*>(KSolveNames::Card const*&, std::__detail::__iter_traits::difference_type, KSolveNames::Card const*) const
  2.66      1.66     0.07   927590     0.00     0.00  KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const
  2.47      1.72     0.07 24102363     0.00     0.00  unsigned int KSolveNames::MisorderCount<KSolveNames::Card const*>(KSolveNames::Card const*, KSolveNames::Card const*)
  2.28      1.78     0.06 114842361     0.00     0.00  frystl::static_vector<KSolveNames::Card, 24u>::back() const
  2.28      1.84     0.06 58527106     0.00     0.00  KSolveNames::Pile::Draw(KSolveNames::Pile&)
  2.28      1.90     0.06  6312412     0.00     0.00  void std::__insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
  1.90      1.95     0.05 17877774     0.00     0.00  frystl::static_vector<KSolveNames::Card, 24u>::resize(unsigned int)
  1.90      2.00     0.05  7218862     0.00     0.00  bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)
  1.90      2.05     0.05  6312412     0.00     0.00  KSolveNames::GameState::GameState(KSolveNames::Game const&, unsigned int)
  1.33      2.08     0.04   924738     0.00     0.00  KSolveNames::Game::Deal()
  1.14      2.12     0.03 12819599     0.00     0.00  KSolveNames::TalonSim::TopCard() const
  1.14      2.15     0.03  6312412     0.00     0.00  KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec)
  1.14      2.17     0.03  6312412     0.00     0.00  void std::__sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
  1.14      2.21     0.03  3176806     0.00     0.00  KSolveNames::Branch& frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::emplace_back<KSolveNames::MoveSpec const&, unsigned int&>(KSolveNames::MoveSpec const&, unsigned int&)
  1.14      2.23     0.03   924736     0.00     0.00  KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int)
  0.76      2.25     0.02 17877774     0.00     0.00  KSolveNames::Pile::Take(KSolveNames::Pile&, unsigned int)
  0.76      2.27     0.02 17664487     0.00     0.00  KSolveNames::Pile::Pop()
  0.76      2.29     0.02 12819599     0.00     0.00  KSolveNames::TalonFuture& frystl::static_vector<KSolveNames::TalonFuture, 24u>::emplace_back<KSolveNames::Card, unsigned int&, unsigned int, bool>(KSolveNames::Card&&, unsigned int&, unsigned int&&, bool&&)
  0.76      2.31     0.02  9464390     0.00     0.00  gtl::priv::probe_seq<16ul>::probe_seq(unsigned long, unsigned long)
  0.76      2.33     0.02   927590     0.00     0.00  KSolveNames::TalonCards(KSolveNames::Game const&)
  0.76      2.35     0.02   924738     0.00     0.00  void frystl::static_vector<KSolveNames::Card, 24u>::assign<std::reverse_iterator<KSolveNames::Card const*>, void>(std::reverse_iterator<KSolveNames::Card const*>, std::reverse_iterator<KSolveNames::Card const*>)
  0.38      2.37     0.01 41065164     0.00     0.00  auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::Pile const&>(KSolveNames::Pile const&) const
  0.38      2.38     0.01 17664506     0.00     0.00  KSolveNames::MoveSpec::DrawCount() const
  0.38      2.38     0.01 17664487     0.00     0.00  KSolveNames::Pile::Draw(KSolveNames::Pile&, int)
  0.38      2.40     0.01 14098742     0.00     0.00  frystl::static_vector<KSolveNames::MoveSpec, 43u>::pop_back()
  0.38      2.40     0.01 13484019     0.00     0.00  frystl::static_vector<KSolveNames::MoveSpec, 43u>::back()
  0.38      2.42     0.01 11027797     0.00     0.00  std::mutex::lock()
  0.38      2.42     0.01  9840928     0.00     0.00  frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int) const
  0.38      2.44     0.01  6312412     0.00     0.00  bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&)
  0.38      2.44     0.01  3176807     0.00     0.00  KSolveNames::MinimumMovesLeft(KSolveNames::Game const&)
  0.38      2.46     0.01  3151978     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::prepare_insert(unsigned long)
  0.38      2.46     0.01  3151978     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_first_non_full(unsigned long)
  0.38      2.48     0.01  3151978     0.00     0.00  auto const& gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor::operator()<KSolveNames::GameState const&>(KSolveNames::GameState const&) const
  0.38      2.48     0.01  3011362     0.00     0.00  KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int)
  0.38      2.50     0.01  2252070     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MFV_Iterator<false>::Increment()
  0.38      2.50     0.01  1052744     0.00     0.00  void std::__unguarded_linear_insert<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
  0.38      2.52     0.01   924736     0.00     0.00  KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&)
  0.38      2.52     0.01   924736     0.00     0.00  KSolveNames::WorkerState::MakeAutoMoves()
  0.38      2.54     0.01   924736     0.00     0.00  KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop()
  0.38      2.54     0.01   924736     0.00     0.00  KSolveNames::MoveStorage::MakeSequenceMoves(KSolveNames::Game&) const
  0.38      2.56     0.01   611774     0.00     0.00  KSolveNames::MoveStorage::UpdateFringe(unsigned int)
  0.38      2.56     0.01   611774     0.00     0.00  KSolveNames::MoveStorage::UpdateMoveTree()
  0.38      2.58     0.01   611774     0.00     0.00  void std::__insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
  0.38      2.58     0.01   611774     0.00     0.00  void std::__sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
  0.38      2.60     0.01   575694     0.00     0.00  KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::MoveSpec const&>(KSolveNames::MoveSpec const&)
  0.38      2.60     0.01   534354     0.00     0.00  KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&)
  0.38      2.62     0.01        1     0.01     2.61  KSolveNames::Worker(KSolveNames::WorkerState*)
  0.38      2.62     0.01                             _init
  0.19      2.63     0.01  6312414     0.00     0.00  std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::empty() const
  0.00      2.63     0.00 21414075     0.00     0.00  frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_front(KSolveNames::MoveSpec const&)
  0.00      2.63     0.00 17588990     0.00     0.00  KSolveNames::MoveSpec::FromUpCount() const
  0.00      2.63     0.00 12819599     0.00     0.00  frystl::static_vector<KSolveNames::TalonFuture, 24u>::back()
  0.00      2.63     0.00 12819599     0.00     0.00  frystl::static_vector<KSolveNames::TalonFuture, 24u>::pop_back()
  0.00      2.63     0.00 10615316     0.00     0.00  KSolveNames::XYZ_Test(KSolveNames::MoveSpec, KSolveNames::MoveSpec)
  0.00      2.63     0.00  9143593     0.00     0.00  unsigned int* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*)
  0.00      2.63     0.00  6473166     0.00     0.00  frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int)
  0.00      2.63     0.00  6312412     0.00     0.00  KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)
  0.00      2.63     0.00  6312412     0.00     0.00  gtl::LockableBaseImpl<std::mutex>::WriteLock::operator=(gtl::LockableBaseImpl<std::mutex>::WriteLock&&)
  0.00      2.63     0.00  6312412     0.00     0.00  std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&)
  0.00      2.63     0.00  6312412     0.00     0.00  void std::__introsort_loop<unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
  0.00      2.63     0.00  6312412     0.00     0.00  void std::__final_insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
  0.00      2.63     0.00  6312412     0.00     0.00  void std::sort<unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>(unsigned int*, unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1})
  0.00      2.63     0.00  5026316     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MakeIterator(unsigned long) const
  0.00      2.63     0.00  5026278     0.00     0.00  frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::operator[](unsigned int)
  0.00      2.63     0.00  4130263     0.00     0.00  KSolveNames::QMovesTemplate<43u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool)
  0.00      2.63     0.00  4130263     0.00     0.00  KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&)
  0.00      2.63     0.00  3181850     0.00     0.00  std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::back()
  0.00      2.63     0.00  3176806     0.00     0.00  KSolveNames::MoveStorage::PushBranch(KSolveNames::MoveSpec, unsigned int)
  0.00      2.63     0.00  3176806     0.00     0.00  void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&)
  0.00      2.63     0.00  3176806     0.00     0.00  KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::UpsizeTo(unsigned int)
  0.00      2.63     0.00  3176806     0.00     0.00  KSolveNames::MoveStorage::MovePair& frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::emplace_back<KSolveNames::MoveSpec&, unsigned int>(KSolveNames::MoveSpec&, unsigned int&&)
  0.00      2.63     0.00  3176806     0.00     0.00  frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::back()
  0.00      2.63     0.00  3176806     0.00     0.00  frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::pop_back()
  0.00      2.63     0.00  3176806     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Grow(unsigned long)
  0.00      2.63     0.00  3160434     0.00     0.00  gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator::iterator(gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator const&)
  0.00      2.63     0.00  3151978     0.00     0.00  void gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_at<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(unsigned long&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&)
  0.00      2.63     0.00  3151978     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::set_ctrl(unsigned long, signed char)
  0.00      2.63     0.00  2455588     0.00     0.00  KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&)
  0.00      2.63     0.00  1749244     0.00     0.00  frystl::static_vector<KSolveNames::MoveSpec, 9u>::back()
  0.00      2.63     0.00  1512288     0.00     0.00  KSolveNames::MoveStorage::MovePair* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<KSolveNames::MoveStorage::MovePair, KSolveNames::MoveStorage::MovePair>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*)
  0.00      2.63     0.00  1503285     0.00     0.00  KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)
  0.00      2.63     0.00  1503285     0.00     0.00  frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_back(KSolveNames::MoveSpec const&)
  0.00      2.63     0.00  1503285     0.00     0.00  frystl::static_vector<KSolveNames::MoveSpec, 43u>& frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator=<43u>(frystl::static_vector<KSolveNames::MoveSpec, 43u>&&)
  0.00      2.63     0.00  1503285     0.00     0.00  KSolveNames::Game::MinFoundationPileSize() const
  0.00      2.63     0.00  1444936     0.00     0.00  void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)
  0.00      2.63     0.00  1444936     0.00     0.00  KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const
  0.00      2.63     0.00  1444936     0.00     0.00  KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const
  0.00      2.63     0.00  1444936     0.00     0.00  std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const
  0.00      2.63     0.00  1444936     0.00     0.00  std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<9u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<9u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<9u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const
  0.00      2.63     0.00  1157098     0.00     0.00  frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator[](unsigned int)
  0.00      2.63     0.00   927590     0.00     0.00  void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)
  0.00      2.63     0.00   927590     0.00     0.00  KSolveNames::Game::MovesFromFoundation(KSolveNames::QMovesTemplate<43u>&, unsigned int) const
  0.00      2.63     0.00   927590     0.00     0.00  KSolveNames::Game::NonDominantAvailableMoves(KSolveNames::QMovesTemplate<43u>&, unsigned int) const
  0.00      2.63     0.00   927590     0.00     0.00  KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const
  0.00      2.63     0.00   927590     0.00     0.00  std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const
  0.00      2.63     0.00   927590     0.00     0.00  std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<43u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<43u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<43u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const
  0.00      2.63     0.00   924736     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::back()
  0.00      2.63     0.00   924736     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::pop_back()
  0.00      2.63     0.00   924735     0.00     0.00  KSolveNames::MoveStorage::ShareMoves()
  0.00      2.63     0.00   782264     0.00     0.00  KSolveNames::Branch& std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::emplace_back<KSolveNames::MoveSpec&, unsigned int&>(KSolveNames::MoveSpec&, unsigned int&)
  0.00      2.63     0.00   782264     0.00     0.00  std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::back()
  0.00      2.63     0.00   611774     0.00     0.00  std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>(KSolveNames::MoveSpec*&, std::__detail::__iter_traits::difference_type, KSolveNames::MoveSpec*) const
  0.00      2.63     0.00   611774     0.00     0.00  auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&>(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&) const
  0.00      2.63     0.00   611774     0.00     0.00  std::__conditional<borrowed_range<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&> >::type<decltype (__begin((declval<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&>)())), std::ranges::dangling> std::ranges::__sort_fn::operator()<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*) const
  0.00      2.63     0.00   611774     0.00     0.00  std::ranges::drop_view<std::ranges::ref_view<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > > >::begin() const
  0.00      2.63     0.00   611774     0.00     0.00  void std::__introsort_loop<KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
  0.00      2.63     0.00   611774     0.00     0.00  void std::__final_insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
  0.00      2.63     0.00   611774     0.00     0.00  void std::sort<KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1})
  0.00      2.63     0.00   586775     0.00     0.00  frystl::static_vector<KSolveNames::MoveSpec, 9u>::pop_back()
  0.00      2.63     0.00   578549     0.00     0.00  KSolveNames::MoveStorage::PushStem(KSolveNames::MoveSpec)
  0.00      2.63     0.00    52421     0.00     0.00  KSolveNames::QMovesTemplate<9u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool)
  0.00      2.63     0.00    52421     0.00     0.00  KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&)
  0.00      2.63     0.00    46236     0.00     0.00  KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int, KSolveNames::Card::SuitT)
  0.00      2.63     0.00    46236     0.00     0.00  KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT&&)
  0.00      2.63     0.00     4096     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::MakeLayout(unsigned long)
  0.00      2.63     0.00     3130     0.00     0.00  std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::push_back(KSolveNames::Branch* const&)
  0.00      2.63     0.00     2048     0.00     0.00  void gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reset_ctrl(unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::destroy_slots()
  0.00      2.63     0.00     2048     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::resize(unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  gtl::priv::CapacityToGrowth(unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  void* gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  std::conditional<is_const_v<char>, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<0ul, char>(char*) const
  0.00      2.63     0.00     2048     0.00     0.00  std::conditional<is_const_v<char>, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<1ul, char>(char*) const
  0.00      2.63     0.00     2048     0.00     0.00  std::__new_allocator<gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M>::deallocate(gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M*, unsigned long)
  0.00      2.63     0.00     2048     0.00     0.00  std::__new_allocator<gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long)::M>::allocate(unsigned long, void const*)
  0.00      2.63     0.00      958     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Shrink()
  0.00      2.63     0.00      312     0.00     0.00  frystl::static_vector<KSolveNames::Card, 52u>::back()
  0.00      2.63     0.00      312     0.00     0.00  frystl::static_vector<KSolveNames::Card, 52u>::pop_back()
  0.00      2.63     0.00      260     0.00     0.00  KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&)
  0.00      2.63     0.00      100     0.00     0.00  frystl::static_vector<KSolveNames::Card, 52u>::operator[](unsigned int)
  0.00      2.63     0.00       77     0.00     0.00  KSolveNames::Valid(KSolveNames::Game const&, unsigned int, unsigned int, unsigned int)
  0.00      2.63     0.00       77     0.00     0.00  KSolveNames::Game::IsValid(KSolveNames::MoveSpec) const
  0.00      2.63     0.00       52     0.00     0.00  KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<>()
  0.00      2.63     0.00       50     0.00     0.00  std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()
  0.00      2.63     0.00       50     0.00     0.00  unsigned int std::uniform_int_distribution<unsigned int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)
  0.00      2.63     0.00       50     0.00     0.00  unsigned int std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<unsigned int>::param_type const&)
  0.00      2.63     0.00       39     0.00     0.00  KSolveNames::Pile::Pile(KSolveNames::Pile const&)
  0.00      2.63     0.00       39     0.00     0.00  frystl::static_vector<KSolveNames::Card, 24u>::static_vector(frystl::static_vector<KSolveNames::Card, 24u> const&)
  0.00      2.63     0.00       38     0.00     0.00  KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT& frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::emplace_back<>()
  0.00      2.63     0.00       38     0.00     0.00  frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::back()
  0.00      2.63     0.00       38     0.00     0.00  frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::pop_back()
  0.00      2.63     0.00       38     0.00     0.00  void frystl::Construct<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT>(KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT*)
  0.00      2.63     0.00       38     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::end()
  0.00      2.63     0.00       38     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::clear()
  0.00      2.63     0.00       38     0.00     0.00  frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::mf_vector()
  0.00      2.63     0.00       38     0.00     0.00  std::_Vector_base<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::~_Vector_base()
  0.00      2.63     0.00       38     0.00     0.00  std::__new_allocator<KSolveNames::Branch*>::deallocate(KSolveNames::Branch**, unsigned long)
  0.00      2.63     0.00       38     0.00     0.00  std::__new_allocator<KSolveNames::Branch*>::allocate(unsigned long, void const*)
  0.00      2.63     0.00       38     0.00     0.00  KSolveNames::Branch*& std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::emplace_back<KSolveNames::Branch*>(KSolveNames::Branch*&&)
  0.00      2.63     0.00       38     0.00     0.00  std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::reserve(unsigned long)
  0.00      2.63     0.00       38     0.00     0.00  decltype (::new ((void*)(0)) KSolveNames::Branch*((declval<KSolveNames::Branch*>)())) std::construct_at<KSolveNames::Branch*, KSolveNames::Branch*>(KSolveNames::Branch**, KSolveNames::Branch*&&)
  0.00      2.63     0.00       33     0.00     0.00  bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
  0.00      2.63     0.00       21     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()
  0.00      2.63     0.00       20     0.00     0.00  frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::resize(unsigned int)
  0.00      2.63     0.00       19     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
  0.00      2.63     0.00       19     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)
  0.00      2.63     0.00       19     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
  0.00      2.63     0.00        5     0.00     0.00  frystl::static_vector<KSolveNames::Card, 52u>::static_vector(frystl::static_vector<KSolveNames::Card, 52u> const&)
  0.00      2.63     0.00        4     0.00     0.00  KSolveNames::Game::~Game()
  0.00      2.63     0.00        4     0.00     0.00  std::array<KSolveNames::Pile, 4ul>::~array()
  0.00      2.63     0.00        4     0.00     0.00  std::array<KSolveNames::Pile, 7ul>::~array()
  0.00      2.63     0.00        3     0.00     0.00  GetNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
  0.00      2.63     0.00        3     0.00     0.00  KSolveNames::Game::Game(KSolveNames::Game const&)
  0.00      2.63     0.00        3     0.00     0.00  int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)
  0.00      2.63     0.00        3     0.00     0.00  std::array<KSolveNames::Pile, 4ul>::array(std::array<KSolveNames::Pile, 4ul> const&)
  0.00      2.63     0.00        3     0.00     0.00  std::array<KSolveNames::Pile, 7ul>::array(std::array<KSolveNames::Pile, 7ul> const&)
  0.00      2.63     0.00        3     0.00     0.00  __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
  0.00      2.63     0.00        2     0.00     0.00  KSolveNames::MoveStorage::MoveStorage(KSolveNames::SharedMoveStorage&)
  0.00      2.63     0.00        2     0.00     0.00  KSolveNames::MoveStorage::~MoveStorage()
  0.00      2.63     0.00        2     0.00     0.00  KSolveNames::Game::GameOver() const
  0.00      2.63     0.00        2     0.00     0.00  std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::~_Vector_base()
  0.00      2.63     0.00        2     0.00     0.00  std::__new_allocator<KSolveNames::MoveSpec>::deallocate(KSolveNames::MoveSpec*, unsigned long)
  0.00      2.63     0.00        2     0.00     0.00  std::__new_allocator<KSolveNames::MoveSpec>::allocate(unsigned long, void const*)
  0.00      2.63     0.00        2     0.00     0.00  std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)
  0.00      2.63     0.00        2     0.00     0.00  KSolveNames::Pile const* std::__find_if<KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}> >(KSolveNames::Pile const*, KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}>, std::random_access_iterator_tag)
  0.00      2.63     0.00        1     0.00     0.00  __static_initialization_and_destruction_0()
  0.00      2.63     0.00        1     0.00     0.00  GetSpec(int, char**)
  0.00      2.63     0.00        1     0.00     2.62  KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int)
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::WorkerState::WorkerState(KSolveNames::WorkerState const&)
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::NumberedDeal(unsigned int)
  0.00      2.63     0.00        1     0.00     0.00  void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::GameStateMemory::GameStateMemory()
  0.00      2.63     0.00        1     0.00     0.00  void KSolveNames::CandidateSolution::ReplaceIfShorter<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&, unsigned int)
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::SharedMoveStorage::SharedMoveStorage(unsigned long, unsigned int)
  0.00      2.63     0.00        1     0.00     0.01  KSolveNames::SharedMoveStorage::~SharedMoveStorage()
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::Game::Game(KSolveNames::CardDeck, unsigned int, unsigned int)
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::Shuffle(KSolveNames::CardDeck&, unsigned int)
  0.00      2.63     0.00        1     0.00     0.00  unsigned int KSolveNames::MoveCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)
  0.00      2.63     0.00        1     0.00     2.61  KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&)
  0.00      2.63     0.00        1     0.00     0.00  gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long)
  0.00      2.63     0.00        1     0.00     0.00  gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reserve(unsigned long)
  0.00      2.63     0.00        1     0.00     0.00  std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const
  0.00      2.63     0.00        1     0.00     0.00  std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const
  0.00      2.63     0.00        1     0.00     0.00  std::_Vector_base<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~_Vector_base()
  0.00      2.63     0.00        1     0.00     0.00  std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_create_storage(unsigned long)
  0.00      2.63     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base()
  0.00      2.63     0.00        1     0.00     0.00  std::__new_allocator<KSolveNames::Branch>::deallocate(KSolveNames::Branch*, unsigned long)
  0.00      2.63     0.00        1     0.00     0.00  std::__new_allocator<KSolveNames::Branch>::allocate(unsigned long, void const*)
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::MoveSpec* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*)
  0.00      2.63     0.00        1     0.00     0.00  std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()
  0.00      2.63     0.00        1     0.00     0.00  std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::array()
  0.00      2.63     0.00        1     0.00     0.00  std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::~array()
  0.00      2.63     0.00        1     0.00     0.00  std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)
  0.00      2.63     0.00        1     0.00     0.00  std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)
  0.00      2.63     0.00        1     0.00     0.00  std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::reserve(unsigned long)
  0.00      2.63     0.00        1     0.00     0.00  std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~vector()
  0.00      2.63     0.00        1     0.00     0.00  void std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_assign_aux<KSolveNames::MoveSpec const*>(KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*, std::forward_iterator_tag)
  0.00      2.63     0.00        1     0.00     0.00  KSolveNames::MoveSpec* std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_allocate_and_copy<KSolveNames::MoveSpec const*>(unsigned long, KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*)
  0.00      2.63     0.00        1     0.00     0.00  std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::vector(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)
  0.00      2.63     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::reserve(unsigned long)
  0.00      2.63     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::~vector()
  0.00      2.63     0.00        1     0.00     0.00  void std::_Destroy<std::thread*>(std::thread*, std::thread*)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2024 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.38% of 2.63 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.6    0.00    2.62                 main [1]
                0.00    2.62       1/1           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
                0.00    0.00       1/1           void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [97]
                0.00    0.00       1/1           KSolveNames::Game::Game(KSolveNames::CardDeck, unsigned int, unsigned int) [101]
                0.00    0.00       1/3           KSolveNames::Game::Game(KSolveNames::Game const&) [100]
                0.00    0.00       2/4           KSolveNames::Game::~Game() [103]
                0.00    0.00     104/312         frystl::static_vector<KSolveNames::Card, 52u>::pop_back() [171]
                0.00    0.00       1/1           GetSpec(int, char**) [208]
                0.00    0.00       1/1           std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [225]
                0.00    0.00       1/1           std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [224]
                0.00    0.00       1/1           unsigned int KSolveNames::MoveCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [212]
                0.00    0.00       1/1           std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const [214]
                0.00    0.00       1/2           std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::~_Vector_base() [202]
                0.00    0.00       1/1           KSolveNames::NumberedDeal(unsigned int) [209]
                0.00    0.00       1/5           frystl::static_vector<KSolveNames::Card, 52u>::static_vector(frystl::static_vector<KSolveNames::Card, 52u> const&) [195]
-----------------------------------------------
                0.00    2.62       1/1           main [1]
[2]     99.6    0.00    2.62       1         KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
                0.00    2.61       1/1           KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&) [3]
                0.00    0.01       1/1           KSolveNames::SharedMoveStorage::~SharedMoveStorage() [80]
                0.00    0.00       1/1           KSolveNames::GameStateMemory::GameStateMemory() [94]
                0.00    0.00       1/3           KSolveNames::Game::Game(KSolveNames::Game const&) [100]
                0.00    0.00       1/4           KSolveNames::Game::~Game() [103]
                0.00    0.00       1/3176807     KSolveNames::MinimumMovesLeft(KSolveNames::Game const&) [37]
                0.00    0.00       1/1           KSolveNames::SharedMoveStorage::SharedMoveStorage(unsigned long, unsigned int) [210]
                0.00    0.00       1/2           KSolveNames::MoveStorage::MoveStorage(KSolveNames::SharedMoveStorage&) [199]
                0.00    0.00       1/1           std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::vector(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [230]
                0.00    0.00       1/2           KSolveNames::MoveStorage::~MoveStorage() [200]
                0.00    0.00       1/2           std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::~_Vector_base() [202]
                0.00    0.00       1/1           std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::~array() [223]
-----------------------------------------------
                0.00    2.61       1/1           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
[3]     99.2    0.00    2.61       1         KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&) [3]
                0.01    2.60       1/1           KSolveNames::Worker(KSolveNames::WorkerState*) [4]
                0.00    0.00       1/924736      KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::reserve(unsigned long) [231]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::~vector() [232]
-----------------------------------------------
                0.01    2.60       1/1           KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&) [3]
[4]     99.2    0.01    2.60       1         KSolveNames::Worker(KSolveNames::WorkerState*) [4]
                0.03    1.99  924735/924736      KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
                0.01    0.57  924736/924736      KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&) [10]
                0.00    0.00       1/1           KSolveNames::WorkerState::WorkerState(KSolveNames::WorkerState const&) [104]
                0.00    0.00       1/4           KSolveNames::Game::~Game() [103]
                0.00    0.00       1/2           KSolveNames::MoveStorage::~MoveStorage() [200]
-----------------------------------------------
                0.00    0.00       1/924736      KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&) [3]
                0.03    1.99  924735/924736      KSolveNames::Worker(KSolveNames::WorkerState*) [4]
[5]     76.8    0.03    1.99  924736         KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
                0.00    1.22 6312412/6312412     KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int) [6]
                0.01    0.39  924736/924736      KSolveNames::WorkerState::MakeAutoMoves() [13]
                0.03    0.08 6312412/6312412     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.02    0.07 6312412/29229849     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
                0.00    0.08  924735/924735      KSolveNames::MoveStorage::ShareMoves() [34]
                0.01    0.06 3176806/3176807     KSolveNames::MinimumMovesLeft(KSolveNames::Game const&) [37]
                0.00    0.00 6312412/6312414     std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::empty() const [87]
                0.00    0.00 6312412/14098742     frystl::static_vector<KSolveNames::MoveSpec, 43u>::pop_back() [72]
                0.00    0.00       1/1           void KSolveNames::CandidateSolution::ReplaceIfShorter<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&, unsigned int) [111]
                0.00    0.00 3176806/3176806     KSolveNames::MoveStorage::PushBranch(KSolveNames::MoveSpec, unsigned int) [130]
                0.00    0.00       1/2           KSolveNames::Game::GameOver() const [201]
-----------------------------------------------
                0.00    1.22 6312412/6312412     KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[6]     46.2    0.00    1.22 6312412         KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int) [6]
                0.01    0.76 6312412/6312412     bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [7]
                0.05    0.40 6312412/6312412     KSolveNames::GameState::GameState(KSolveNames::Game const&, unsigned int) [11]
-----------------------------------------------
                0.01    0.76 6312412/6312412     KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int) [6]
[7]     29.1    0.01    0.76 6312412         bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [7]
                0.00    0.62 6312412/6312412     std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&) [8]
                0.00    0.14 3151978/3151978     void gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_at<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(unsigned long&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [25]
                0.00    0.00 3160434/3160434     gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator::iterator(gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator const&) [135]
                0.00    0.00 3151978/3151978     gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::set_ctrl(unsigned long, signed char) [136]
-----------------------------------------------
                0.00    0.62 6312412/6312412     bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [7]
[8]     23.4    0.00    0.62 6312412         std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&) [8]
                0.35    0.23 6312412/6312412     unsigned long gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::_find_key<KSolveNames::GameState>(KSolveNames::GameState const&, unsigned long) [9]
                0.01    0.02 3151978/3151978     gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::prepare_insert(unsigned long) [59]
                0.01    0.00 6312412/11027797     std::mutex::lock() [73]
                0.00    0.00 6312412/6312412     gtl::LockableBaseImpl<std::mutex>::WriteLock::operator=(gtl::LockableBaseImpl<std::mutex>::WriteLock&&) [125]
-----------------------------------------------
                0.35    0.23 6312412/6312412     std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&) [8]
[9]     22.2    0.35    0.23 6312412         unsigned long gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::_find_key<KSolveNames::GameState>(KSolveNames::GameState const&, unsigned long) [9]
                0.22    0.00 4075079/4075079     KSolveNames::GameState::operator==(KSolveNames::GameState const&) const [19]
                0.01    0.00 6312412/9464390     gtl::priv::probe_seq<16ul>::probe_seq(unsigned long, unsigned long) [61]
-----------------------------------------------
                0.01    0.57  924736/924736      KSolveNames::Worker(KSolveNames::WorkerState*) [4]
[10]    22.1    0.01    0.57  924736         KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&) [10]
                0.01    0.32  924736/924736      KSolveNames::MoveStorage::MakeSequenceMoves(KSolveNames::Game&) const [15]
                0.03    0.12  924736/924738      KSolveNames::Game::Deal() [23]
                0.08    0.00  924736/924736      KSolveNames::MoveStorage::LoadMoveSequence() [36]
                0.01    0.00  924736/924736      KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop() [67]
-----------------------------------------------
                0.05    0.40 6312412/6312412     KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int) [6]
[11]    17.1    0.05    0.40 6312412         KSolveNames::GameState::GameState(KSolveNames::Game const&, unsigned int) [11]
                0.15    0.16 44186884/44186884     KSolveNames::DeflateTableau(KSolveNames::Pile const&) [16]
                0.00    0.09 6312412/6312412     void std::sort<unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>(unsigned int*, unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}) [32]
-----------------------------------------------
                0.00    0.00      77/29229849     void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [97]
                0.00    0.01  578549/29229849     KSolveNames::WorkerState::MakeAutoMoves() [13]
                0.02    0.07 6312412/29229849     KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
                0.06    0.25 22338811/29229849     KSolveNames::MoveStorage::MakeSequenceMoves(KSolveNames::Game&) const [15]
[12]    15.8    0.09    0.33 29229849         KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
                0.01    0.15 13537045/17664487     KSolveNames::Pile::Draw(KSolveNames::Pile&, int) [20]
                0.02    0.10 15692804/17877774     KSolveNames::Pile::Take(KSolveNames::Pile&, unsigned int) [28]
                0.02    0.01 13537045/17664487     KSolveNames::Pile::Pop() [53]
                0.01    0.01 13537045/153560457     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
                0.01    0.00 13537045/17664506     KSolveNames::MoveSpec::DrawCount() const [71]
                0.00    0.00   48934/58527106     KSolveNames::Pile::Draw(KSolveNames::Pile&) [21]
                0.00    0.00 15520037/17588990     KSolveNames::MoveSpec::FromUpCount() const [119]
-----------------------------------------------
                0.01    0.39  924736/924736      KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[13]    15.4    0.01    0.39  924736         KSolveNames::WorkerState::MakeAutoMoves() [13]
                0.00    0.38 1503285/1503285     KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
                0.00    0.01  578549/29229849     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
                0.00    0.01 1503285/1503285     frystl::static_vector<KSolveNames::MoveSpec, 43u>& frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator=<43u>(frystl::static_vector<KSolveNames::MoveSpec, 43u>&&) [86]
                0.00    0.00 1157098/1157098     frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator[](unsigned int) [141]
                0.00    0.00  578549/578549      KSolveNames::MoveStorage::PushStem(KSolveNames::MoveSpec) [151]
-----------------------------------------------
                0.00    0.38 1503285/1503285     KSolveNames::WorkerState::MakeAutoMoves() [13]
[14]    14.5    0.00    0.38 1503285         KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
                0.00    0.30  927590/927590      KSolveNames::Game::NonDominantAvailableMoves(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [17]
                0.00    0.05  927590/927590      void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [48]
                0.00    0.02 1444936/1444936     KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const [64]
                0.01    0.00  575694/575694      KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::MoveSpec const&>(KSolveNames::MoveSpec const&) [69]
                0.00    0.00 1444936/1444936     void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [88]
                0.00    0.00 1503285/1503285     KSolveNames::Game::MinFoundationPileSize() const [140]
                0.00    0.00  575694/1749244     frystl::static_vector<KSolveNames::MoveSpec, 9u>::back() [137]
                0.00    0.00  575694/586775      frystl::static_vector<KSolveNames::MoveSpec, 9u>::pop_back() [150]
-----------------------------------------------
                0.01    0.32  924736/924736      KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&) [10]
[15]    12.5    0.01    0.32  924736         KSolveNames::MoveStorage::MakeSequenceMoves(KSolveNames::Game&) const [15]
                0.06    0.25 22338811/29229849     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
-----------------------------------------------
                0.15    0.16 44186884/44186884     KSolveNames::GameState::GameState(KSolveNames::Game const&, unsigned int) [11]
[16]    11.8    0.15    0.16 44186884         KSolveNames::DeflateTableau(KSolveNames::Pile const&) [16]
                0.08    0.07 41065164/41065164     std::ranges::drop_view<std::ranges::ref_view<KSolveNames::Pile const> >::begin() const [24]
                0.01    0.00 41065164/41065164     auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::Pile const&>(KSolveNames::Pile const&) const [70]
-----------------------------------------------
                0.00    0.30  927590/927590      KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[17]    11.5    0.00    0.30  927590         KSolveNames::Game::NonDominantAvailableMoves(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [17]
                0.08    0.11  927590/927590      KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [22]
                0.07    0.03  927590/927590      KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const [30]
                0.00    0.01  927590/927590      KSolveNames::Game::MovesFromFoundation(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [85]
-----------------------------------------------
                0.00    0.00     156/153560457     frystl::static_vector<KSolveNames::Card, 24u>::static_vector(frystl::static_vector<KSolveNames::Card, 24u> const&) [99]
                0.00    0.00 4127442/153560457     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.01    0.01 13537045/153560457     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
                0.02    0.01 22193712/153560457     void frystl::static_vector<KSolveNames::Card, 24u>::assign<std::reverse_iterator<KSolveNames::Card const*>, void>(std::reverse_iterator<KSolveNames::Card const*>, std::reverse_iterator<KSolveNames::Card const*>) [46]
                0.03    0.01 25892664/153560457     KSolveNames::Game::Deal() [23]
                0.03    0.01 29282332/153560457     KSolveNames::Pile::Take(KSolveNames::Pile&, unsigned int) [28]
                0.06    0.03 58527106/153560457     KSolveNames::Pile::Draw(KSolveNames::Pile&) [21]
[18]     9.0    0.17    0.07 153560457         KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
                0.07    0.00 153560457/229752050     frystl::static_vector<KSolveNames::Card, 24u>::back() [31]
-----------------------------------------------
                0.22    0.00 4075079/4075079     unsigned long gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::_find_key<KSolveNames::GameState>(KSolveNames::GameState const&, unsigned long) [9]
[19]     8.4    0.22    0.00 4075079         KSolveNames::GameState::operator==(KSolveNames::GameState const&) const [19]
-----------------------------------------------
                0.00    0.05 4127442/17664487     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.01    0.15 13537045/17664487     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
[20]     8.1    0.01    0.20 17664487         KSolveNames::Pile::Draw(KSolveNames::Pile&, int) [20]
                0.06    0.14 58453882/58527106     KSolveNames::Pile::Draw(KSolveNames::Pile&) [21]
-----------------------------------------------
                0.00    0.00   24290/58527106     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.00    0.00   48934/58527106     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
                0.06    0.14 58453882/58527106     KSolveNames::Pile::Draw(KSolveNames::Pile&, int) [20]
[21]     7.7    0.06    0.14 58527106         KSolveNames::Pile::Draw(KSolveNames::Pile&) [21]
                0.06    0.03 58527106/153560457     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
                0.03    0.00 58527106/153560457     frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
                0.03    0.00 58527106/229752050     frystl::static_vector<KSolveNames::Card, 24u>::back() [31]
-----------------------------------------------
                0.08    0.11  927590/927590      KSolveNames::Game::NonDominantAvailableMoves(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [17]
[22]     7.4    0.08    0.11  927590         KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [22]
                0.02    0.06  927590/927590      KSolveNames::TalonCards(KSolveNames::Game const&) [35]
                0.03    0.00 55207830/114842361     frystl::static_vector<KSolveNames::Card, 24u>::back() const [45]
                0.00    0.01 4130263/4130263     KSolveNames::QMovesTemplate<43u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [84]
                0.00    0.00 12819599/12819599     frystl::static_vector<KSolveNames::TalonFuture, 24u>::pop_back() [121]
-----------------------------------------------
                0.00    0.00       1/924738      KSolveNames::Game::Game(KSolveNames::CardDeck, unsigned int, unsigned int) [101]
                0.00    0.00       1/924738      void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [97]
                0.03    0.12  924736/924738      KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&) [10]
[23]     5.7    0.04    0.12  924738         KSolveNames::Game::Deal() [23]
                0.02    0.03  924738/924738      void frystl::static_vector<KSolveNames::Card, 24u>::assign<std::reverse_iterator<KSolveNames::Card const*>, void>(std::reverse_iterator<KSolveNames::Card const*>, std::reverse_iterator<KSolveNames::Card const*>) [46]
                0.03    0.01 25892664/153560457     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
                0.02    0.00 48086324/153560457     frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
                0.00    0.00 6473166/6473166     frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int) [124]
-----------------------------------------------
                0.08    0.07 41065164/41065164     KSolveNames::DeflateTableau(KSolveNames::Pile const&) [16]
[24]     5.7    0.08    0.07 41065164         std::ranges::drop_view<std::ranges::ref_view<KSolveNames::Pile const> >::begin() const [24]
                0.07    0.00 41065164/41065164     std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::Card const*, KSolveNames::Card const*>(KSolveNames::Card const*&, std::__detail::__iter_traits::difference_type, KSolveNames::Card const*) const [40]
-----------------------------------------------
                0.00    0.14 3151978/3151978     bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [7]
[25]     5.3    0.00    0.14 3151978         void gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_at<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(unsigned long&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [25]
                0.01    0.13 3151978/3151978     auto const& gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor::operator()<KSolveNames::GameState const&>(KSolveNames::GameState const&) const [26]
-----------------------------------------------
                0.01    0.13 3151978/3151978     void gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_at<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(unsigned long&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [25]
[26]     5.3    0.01    0.13 3151978         auto const& gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor::operator()<KSolveNames::GameState const&>(KSolveNames::GameState const&) const [26]
                0.13    0.00 3151978/3151978     decltype (::new ((void*)(0)) KSolveNames::GameState((declval<KSolveNames::GameState const&>)())) std::construct_at<KSolveNames::GameState, KSolveNames::GameState const&>(KSolveNames::GameState*, KSolveNames::GameState const&) [27]
-----------------------------------------------
                0.13    0.00 3151978/3151978     auto const& gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor::operator()<KSolveNames::GameState const&>(KSolveNames::GameState const&) const [26]
[27]     4.9    0.13    0.00 3151978         decltype (::new ((void*)(0)) KSolveNames::GameState((declval<KSolveNames::GameState const&>)())) std::construct_at<KSolveNames::GameState, KSolveNames::GameState const&>(KSolveNames::GameState*, KSolveNames::GameState const&) [27]
-----------------------------------------------
                0.00    0.01 2184970/17877774     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.02    0.10 15692804/17877774     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
[28]     4.9    0.02    0.11 17877774         KSolveNames::Pile::Take(KSolveNames::Pile&, unsigned int) [28]
                0.05    0.01 17877774/17877774     frystl::static_vector<KSolveNames::Card, 24u>::resize(unsigned int) [42]
                0.03    0.01 29282332/153560457     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
-----------------------------------------------
                0.03    0.08 6312412/6312412     KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[29]     4.3    0.03    0.08 6312412         KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.00    0.05 4127442/17664487     KSolveNames::Pile::Draw(KSolveNames::Pile&, int) [20]
                0.00    0.01 2184970/17877774     KSolveNames::Pile::Take(KSolveNames::Pile&, unsigned int) [28]
                0.00    0.00 4127442/17664487     KSolveNames::Pile::Pop() [53]
                0.00    0.00 4127442/153560457     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
                0.00    0.00 4127442/17664506     KSolveNames::MoveSpec::DrawCount() const [71]
                0.00    0.00   24290/58527106     KSolveNames::Pile::Draw(KSolveNames::Pile&) [21]
                0.00    0.00 2047533/17588990     KSolveNames::MoveSpec::FromUpCount() const [119]
-----------------------------------------------
                0.07    0.03  927590/927590      KSolveNames::Game::NonDominantAvailableMoves(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [17]
[30]     3.8    0.07    0.03  927590         KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const [30]
                0.02    0.00 39609763/114842361     frystl::static_vector<KSolveNames::Card, 24u>::back() const [45]
                0.00    0.01 2099739/2455588     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [83]
                0.00    0.00 2145975/13484019     frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [82]
                0.00    0.00   46236/46236       KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT&&) [93]
-----------------------------------------------
                0.01    0.00 17664487/229752050     KSolveNames::Pile::Pop() [53]
                0.03    0.00 58527106/229752050     KSolveNames::Pile::Draw(KSolveNames::Pile&) [21]
                0.07    0.00 153560457/229752050     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
[31]     3.8    0.10    0.00 229752050         frystl::static_vector<KSolveNames::Card, 24u>::back() [31]
-----------------------------------------------
                0.00    0.09 6312412/6312412     KSolveNames::GameState::GameState(KSolveNames::Game const&, unsigned int) [11]
[32]     3.4    0.00    0.09 6312412         void std::sort<unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>(unsigned int*, unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}) [32]
                0.03    0.06 6312412/6312412     void std::__sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [33]
-----------------------------------------------
                0.03    0.06 6312412/6312412     void std::sort<unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>(unsigned int*, unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}) [32]
[33]     3.4    0.03    0.06 6312412         void std::__sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [33]
                0.00    0.06 6312412/6312412     void std::__final_insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [44]
                0.00    0.00 6312412/6312412     void std::__introsort_loop<unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [126]
-----------------------------------------------
                0.00    0.08  924735/924735      KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[34]     3.2    0.00    0.08  924735         KSolveNames::MoveStorage::ShareMoves() [34]
                0.01    0.06  611774/611774      KSolveNames::MoveStorage::UpdateFringe(unsigned int) [38]
                0.01    0.00  611774/611774      KSolveNames::MoveStorage::UpdateMoveTree() [68]
                0.00    0.00 3176806/3176806     frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::pop_back() [133]
-----------------------------------------------
                0.02    0.06  927590/927590      KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [22]
[35]     3.0    0.02    0.06  927590         KSolveNames::TalonCards(KSolveNames::Game const&) [35]
                0.03    0.01 12819599/12819599     KSolveNames::TalonSim::TopCard() const [52]
                0.02    0.00 12819599/12819599     KSolveNames::TalonFuture& frystl::static_vector<KSolveNames::TalonFuture, 24u>::emplace_back<KSolveNames::Card, unsigned int&, unsigned int, bool>(KSolveNames::Card&&, unsigned int&, unsigned int&&, bool&&) [60]
-----------------------------------------------
                0.08    0.00  924736/924736      KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&) [10]
[36]     3.0    0.08    0.00  924736         KSolveNames::MoveStorage::LoadMoveSequence() [36]
                0.00    0.00 21414075/21414075     frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_front(KSolveNames::MoveSpec const&) [118]
                0.00    0.00  924736/1503285     frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_back(KSolveNames::MoveSpec const&) [139]
-----------------------------------------------
                0.00    0.00       1/3176807     KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
                0.01    0.06 3176806/3176807     KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[37]     2.9    0.01    0.07 3176807         KSolveNames::MinimumMovesLeft(KSolveNames::Game const&) [37]
                0.07    0.00 24102363/24102363     unsigned int KSolveNames::MisorderCount<KSolveNames::Card const*>(KSolveNames::Card const*, KSolveNames::Card const*) [41]
-----------------------------------------------
                0.01    0.06  611774/611774      KSolveNames::MoveStorage::ShareMoves() [34]
[38]     2.8    0.01    0.06  611774         KSolveNames::MoveStorage::UpdateFringe(unsigned int) [38]
                0.00    0.03 3176806/3176806     void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&) [54]
                0.00    0.03  611774/611774      std::__conditional<borrowed_range<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&> >::type<decltype (__begin((declval<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&>)())), std::ranges::dangling> std::ranges::__sort_fn::operator()<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*) const [56]
-----------------------------------------------
                0.00    0.00      52/153560457     KSolveNames::Game::~Game() [103]
                0.00    0.00      74/153560457     std::array<KSolveNames::Pile, 4ul>::~array() [107]
                0.00    0.00      82/153560457     std::array<KSolveNames::Pile, 7ul>::~array() [106]
                0.01    0.00 17664487/153560457     KSolveNames::Pile::Pop() [53]
                0.01    0.00 29282332/153560457     frystl::static_vector<KSolveNames::Card, 24u>::resize(unsigned int) [42]
                0.02    0.00 48086324/153560457     KSolveNames::Game::Deal() [23]
                0.03    0.00 58527106/153560457     KSolveNames::Pile::Draw(KSolveNames::Pile&) [21]
[39]     2.7    0.07    0.00 153560457         frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
-----------------------------------------------
                0.07    0.00 41065164/41065164     std::ranges::drop_view<std::ranges::ref_view<KSolveNames::Pile const> >::begin() const [24]
[40]     2.7    0.07    0.00 41065164         std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::Card const*, KSolveNames::Card const*>(KSolveNames::Card const*&, std::__detail::__iter_traits::difference_type, KSolveNames::Card const*) const [40]
-----------------------------------------------
                0.07    0.00 24102363/24102363     KSolveNames::MinimumMovesLeft(KSolveNames::Game const&) [37]
[41]     2.5    0.07    0.00 24102363         unsigned int KSolveNames::MisorderCount<KSolveNames::Card const*>(KSolveNames::Card const*, KSolveNames::Card const*) [41]
-----------------------------------------------
                0.05    0.01 17877774/17877774     KSolveNames::Pile::Take(KSolveNames::Pile&, unsigned int) [28]
[42]     2.4    0.05    0.01 17877774         frystl::static_vector<KSolveNames::Card, 24u>::resize(unsigned int) [42]
                0.01    0.00 29282332/153560457     frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
-----------------------------------------------
                0.06    0.00 6312412/6312412     void std::__final_insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [44]
[43]     2.3    0.06    0.00 6312412         void std::__insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [43]
                0.00    0.00 9143593/9143593     unsigned int* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*) [123]
-----------------------------------------------
                0.00    0.06 6312412/6312412     void std::__sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [33]
[44]     2.3    0.00    0.06 6312412         void std::__final_insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [44]
                0.06    0.00 6312412/6312412     void std::__insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [43]
-----------------------------------------------
                0.00    0.00      21/114842361     KSolveNames::Valid(KSolveNames::Game const&, unsigned int, unsigned int, unsigned int) [110]
                0.00    0.00 7684479/114842361     KSolveNames::Game::MovesFromFoundation(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [85]
                0.01    0.00 12340268/114842361     KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const [64]
                0.02    0.00 39609763/114842361     KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const [30]
                0.03    0.00 55207830/114842361     KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [22]
[45]     2.3    0.06    0.00 114842361         frystl::static_vector<KSolveNames::Card, 24u>::back() const [45]
-----------------------------------------------
                0.02    0.03  924738/924738      KSolveNames::Game::Deal() [23]
[46]     2.1    0.02    0.03  924738         void frystl::static_vector<KSolveNames::Card, 24u>::assign<std::reverse_iterator<KSolveNames::Card const*>, void>(std::reverse_iterator<KSolveNames::Card const*>, std::reverse_iterator<KSolveNames::Card const*>) [46]
                0.02    0.01 22193712/153560457     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
-----------------------------------------------
                0.00    0.00    1221/7218862     std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [89]
                0.00    0.00  585554/7218862     KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [91]
                0.00    0.00  640561/7218862     std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [49]
                0.04    0.00 5991526/7218862     KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [51]
[47]     1.9    0.05    0.00 7218862         bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
                0.00    0.00   21420/3011362     KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int) [75]
                0.00    0.00 10615316/10615316     KSolveNames::XYZ_Test(KSolveNames::MoveSpec, KSolveNames::MoveSpec) [122]
                0.00    0.00   21420/17588990     KSolveNames::MoveSpec::FromUpCount() const [119]
-----------------------------------------------
                0.00    0.05  927590/927590      KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[48]     1.8    0.00    0.05  927590         void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [48]
                0.00    0.05  927590/927590      std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<43u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<43u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<43u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [50]
                0.00    0.00  316820/14098742     frystl::static_vector<KSolveNames::MoveSpec, 43u>::pop_back() [72]
-----------------------------------------------
                0.00    0.05  927590/927590      std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<43u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<43u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<43u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [50]
[49]     1.7    0.00    0.05  927590         std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [49]
                0.00    0.04  927590/927590      KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [51]
                0.00    0.00  640561/7218862     bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
-----------------------------------------------
                0.00    0.05  927590/927590      void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [48]
[50]     1.7    0.00    0.05  927590         std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<43u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<43u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<43u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [50]
                0.00    0.05  927590/927590      std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [49]
-----------------------------------------------
                0.00    0.04  927590/927590      std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [49]
[51]     1.6    0.00    0.04  927590         KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [51]
                0.04    0.00 5991526/7218862     bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
-----------------------------------------------
                0.03    0.01 12819599/12819599     KSolveNames::TalonCards(KSolveNames::Game const&) [35]
[52]     1.5    0.03    0.01 12819599         KSolveNames::TalonSim::TopCard() const [52]
                0.01    0.00 9840928/9840928     frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int) const [74]
-----------------------------------------------
                0.00    0.00 4127442/17664487     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.02    0.01 13537045/17664487     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
[53]     1.4    0.02    0.02 17664487         KSolveNames::Pile::Pop() [53]
                0.01    0.00 17664487/153560457     frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
                0.01    0.00 17664487/229752050     frystl::static_vector<KSolveNames::Card, 24u>::back() [31]
-----------------------------------------------
                0.00    0.03 3176806/3176806     KSolveNames::MoveStorage::UpdateFringe(unsigned int) [38]
[54]     1.3    0.00    0.03 3176806         void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&) [54]
                0.03    0.00 3176806/3176806     KSolveNames::Branch& frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::emplace_back<KSolveNames::MoveSpec const&, unsigned int&>(KSolveNames::MoveSpec const&, unsigned int&) [55]
                0.00    0.00 3176806/11027797     std::mutex::lock() [73]
                0.00    0.00 3176806/3176806     KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::UpsizeTo(unsigned int) [109]
                0.00    0.00 3176806/5026278     frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::operator[](unsigned int) [128]
-----------------------------------------------
                0.03    0.00 3176806/3176806     void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&) [54]
[55]     1.1    0.03    0.00 3176806         KSolveNames::Branch& frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::emplace_back<KSolveNames::MoveSpec const&, unsigned int&>(KSolveNames::MoveSpec const&, unsigned int&) [55]
                0.00    0.00 3176806/3176806     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Grow(unsigned long) [134]
                0.00    0.00 3176806/5026316     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MakeIterator(unsigned long) const [127]
-----------------------------------------------
                0.00    0.03  611774/611774      KSolveNames::MoveStorage::UpdateFringe(unsigned int) [38]
[56]     1.1    0.00    0.03  611774         std::__conditional<borrowed_range<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&> >::type<decltype (__begin((declval<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&>)())), std::ranges::dangling> std::ranges::__sort_fn::operator()<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*) const [56]
                0.00    0.03  611774/611774      void std::sort<KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}) [57]
-----------------------------------------------
                0.00    0.03  611774/611774      std::__conditional<borrowed_range<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&> >::type<decltype (__begin((declval<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&>)())), std::ranges::dangling> std::ranges::__sort_fn::operator()<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*) const [56]
[57]     1.1    0.00    0.03  611774         void std::sort<KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}) [57]
                0.01    0.02  611774/611774      void std::__sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [58]
-----------------------------------------------
                0.01    0.02  611774/611774      void std::sort<KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}) [57]
[58]     1.1    0.01    0.02  611774         void std::__sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [58]
                0.00    0.02  611774/611774      void std::__final_insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [63]
                0.00    0.00  611774/611774      void std::__introsort_loop<KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [149]
-----------------------------------------------
                0.01    0.02 3151978/3151978     std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&) [8]
[59]     1.0    0.01    0.02 3151978         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::prepare_insert(unsigned long) [59]
                0.01    0.01 3151978/3151978     gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_first_non_full(unsigned long) [65]
-----------------------------------------------
                0.02    0.00 12819599/12819599     KSolveNames::TalonCards(KSolveNames::Game const&) [35]
[60]     0.8    0.02    0.00 12819599         KSolveNames::TalonFuture& frystl::static_vector<KSolveNames::TalonFuture, 24u>::emplace_back<KSolveNames::Card, unsigned int&, unsigned int, bool>(KSolveNames::Card&&, unsigned int&, unsigned int&&, bool&&) [60]
                0.00    0.00 12819599/12819599     frystl::static_vector<KSolveNames::TalonFuture, 24u>::back() [120]
-----------------------------------------------
                0.01    0.00 3151978/9464390     gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_first_non_full(unsigned long) [65]
                0.01    0.00 6312412/9464390     unsigned long gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::_find_key<KSolveNames::GameState>(KSolveNames::GameState const&, unsigned long) [9]
[61]     0.8    0.02    0.00 9464390         gtl::priv::probe_seq<16ul>::probe_seq(unsigned long, unsigned long) [61]
-----------------------------------------------
                0.01    0.01  611774/611774      void std::__final_insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [63]
[62]     0.8    0.01    0.01  611774         void std::__insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [62]
                0.01    0.00 1052744/1052744     void std::__unguarded_linear_insert<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [77]
                0.00    0.00 1512288/1512288     KSolveNames::MoveStorage::MovePair* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<KSolveNames::MoveStorage::MovePair, KSolveNames::MoveStorage::MovePair>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*) [138]
-----------------------------------------------
                0.00    0.02  611774/611774      void std::__sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [58]
[63]     0.8    0.00    0.02  611774         void std::__final_insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [63]
                0.01    0.01  611774/611774      void std::__insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [62]
-----------------------------------------------
                0.00    0.02 1444936/1444936     KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[64]     0.7    0.00    0.02 1444936         KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const [64]
                0.01    0.00  534354/534354      KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [66]
                0.01    0.00 12340268/114842361     frystl::static_vector<KSolveNames::Card, 24u>::back() const [45]
                0.00    0.00  534354/1749244     frystl::static_vector<KSolveNames::MoveSpec, 9u>::back() [137]
                0.00    0.00   52421/52421       KSolveNames::QMovesTemplate<9u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [152]
-----------------------------------------------
                0.01    0.01 3151978/3151978     gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::prepare_insert(unsigned long) [59]
[65]     0.6    0.01    0.01 3151978         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_first_non_full(unsigned long) [65]
                0.01    0.00 3151978/9464390     gtl::priv::probe_seq<16ul>::probe_seq(unsigned long, unsigned long) [61]
-----------------------------------------------
                0.01    0.00  534354/534354      KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const [64]
[66]     0.4    0.01    0.00  534354         KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [66]
                0.00    0.00  534354/3011362     KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int) [75]
                0.00    0.00  534354/1749244     frystl::static_vector<KSolveNames::MoveSpec, 9u>::back() [137]
-----------------------------------------------
                0.01    0.00  924736/924736      KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&) [10]
[67]     0.4    0.01    0.00  924736         KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop() [67]
                0.00    0.00  924736/11027797     std::mutex::lock() [73]
                0.00    0.00 1849472/5026278     frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::operator[](unsigned int) [128]
                0.00    0.00  924736/924736      frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::back() [142]
                0.00    0.00  924736/924736      frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::pop_back() [143]
-----------------------------------------------
                0.01    0.00  611774/611774      KSolveNames::MoveStorage::ShareMoves() [34]
[68]     0.4    0.01    0.00  611774         KSolveNames::MoveStorage::UpdateMoveTree() [68]
                0.00    0.00  611774/11027797     std::mutex::lock() [73]
                0.00    0.00  782264/782264      KSolveNames::Branch& std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::emplace_back<KSolveNames::MoveSpec&, unsigned int&>(KSolveNames::MoveSpec&, unsigned int&) [144]
                0.00    0.00  611774/611774      auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&>(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&) const [147]
                0.00    0.00  611774/611774      std::ranges::drop_view<std::ranges::ref_view<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > > >::begin() const [148]
-----------------------------------------------
                0.01    0.00  575694/575694      KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[69]     0.4    0.01    0.00  575694         KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::MoveSpec const&>(KSolveNames::MoveSpec const&) [69]
                0.00    0.00  575694/13484019     frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [82]
-----------------------------------------------
                0.01    0.00 41065164/41065164     KSolveNames::DeflateTableau(KSolveNames::Pile const&) [16]
[70]     0.4    0.01    0.00 41065164         auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::Pile const&>(KSolveNames::Pile const&) const [70]
-----------------------------------------------
                0.00    0.00      19/17664506     KSolveNames::Game::IsValid(KSolveNames::MoveSpec) const [108]
                0.00    0.00 4127442/17664506     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.01    0.00 13537045/17664506     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
[71]     0.4    0.01    0.00 17664506         KSolveNames::MoveSpec::DrawCount() const [71]
-----------------------------------------------
                0.00    0.00  316820/14098742     void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [48]
                0.00    0.00 6312412/14098742     KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
                0.01    0.00 7469510/14098742     frystl::static_vector<KSolveNames::MoveSpec, 43u>& frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator=<43u>(frystl::static_vector<KSolveNames::MoveSpec, 43u>&&) [86]
[72]     0.4    0.01    0.00 14098742         frystl::static_vector<KSolveNames::MoveSpec, 43u>::pop_back() [72]
-----------------------------------------------
                0.00    0.00       1/11027797     void KSolveNames::CandidateSolution::ReplaceIfShorter<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&, unsigned int) [111]
                0.00    0.00      20/11027797     KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::UpsizeTo(unsigned int) [109]
                0.00    0.00    2048/11027797     gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [95]
                0.00    0.00  611774/11027797     KSolveNames::MoveStorage::UpdateMoveTree() [68]
                0.00    0.00  924736/11027797     KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop() [67]
                0.00    0.00 3176806/11027797     void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&) [54]
                0.01    0.00 6312412/11027797     std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&) [8]
[73]     0.4    0.01    0.00 11027797         std::mutex::lock() [73]
-----------------------------------------------
                0.01    0.00 9840928/9840928     KSolveNames::TalonSim::TopCard() const [52]
[74]     0.4    0.01    0.00 9840928         frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int) const [74]
-----------------------------------------------
                0.00    0.00   21420/3011362     bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
                0.00    0.00  534354/3011362     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [66]
                0.01    0.00 2455588/3011362     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [83]
[75]     0.4    0.01    0.00 3011362         KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int) [75]
-----------------------------------------------
                0.01    0.00 2252070/2252070     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::clear() [79]
[76]     0.4    0.01    0.00 2252070         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MFV_Iterator<false>::Increment() [76]
-----------------------------------------------
                0.01    0.00 1052744/1052744     void std::__insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [62]
[77]     0.4    0.01    0.00 1052744         void std::__unguarded_linear_insert<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [77]
-----------------------------------------------
                0.00    0.01      38/38          KSolveNames::SharedMoveStorage::~SharedMoveStorage() [80]
[78]     0.4    0.00    0.01      38         frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::pop_back() [78]
                0.00    0.01      38/38          frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::clear() [79]
                0.00    0.00      38/38          std::_Vector_base<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::~_Vector_base() [183]
-----------------------------------------------
                0.00    0.01      38/38          frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::pop_back() [78]
[79]     0.4    0.00    0.01      38         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::clear() [79]
                0.01    0.00 2252070/2252070     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MFV_Iterator<false>::Increment() [76]
                0.00    0.00      38/38          frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::end() [181]
                0.00    0.00      38/958         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Shrink() [169]
-----------------------------------------------
                0.00    0.01       1/1           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
[80]     0.4    0.00    0.01       1         KSolveNames::SharedMoveStorage::~SharedMoveStorage() [80]
                0.00    0.01      38/38          frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::pop_back() [78]
                0.00    0.00       1/1           std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~vector() [227]
-----------------------------------------------
                                                 <spontaneous>
[81]     0.4    0.01    0.00                 _init [81]
-----------------------------------------------
                0.00    0.00   46236/13484019     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT&&) [93]
                0.00    0.00  575694/13484019     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::MoveSpec const&>(KSolveNames::MoveSpec const&) [69]
                0.00    0.00 2145975/13484019     KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const [30]
                0.00    0.00 2455588/13484019     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [83]
                0.00    0.00 4130263/13484019     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [92]
                0.00    0.00 4130263/13484019     KSolveNames::QMovesTemplate<43u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [84]
[82]     0.4    0.01    0.00 13484019         frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [82]
-----------------------------------------------
                0.00    0.00  355849/2455588     KSolveNames::Game::MovesFromFoundation(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [85]
                0.00    0.01 2099739/2455588     KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const [30]
[83]     0.4    0.00    0.01 2455588         KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [83]
                0.01    0.00 2455588/3011362     KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int) [75]
                0.00    0.00 2455588/13484019     frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [82]
-----------------------------------------------
                0.00    0.01 4130263/4130263     KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [22]
[84]     0.2    0.00    0.01 4130263         KSolveNames::QMovesTemplate<43u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [84]
                0.00    0.00 4130263/13484019     frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [82]
                0.00    0.00 4130263/4130263     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [92]
-----------------------------------------------
                0.00    0.01  927590/927590      KSolveNames::Game::NonDominantAvailableMoves(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [17]
[85]     0.2    0.00    0.01  927590         KSolveNames::Game::MovesFromFoundation(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [85]
                0.00    0.00 7684479/114842361     frystl::static_vector<KSolveNames::Card, 24u>::back() const [45]
                0.00    0.00  355849/2455588     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [83]
-----------------------------------------------
                0.00    0.01 1503285/1503285     KSolveNames::WorkerState::MakeAutoMoves() [13]
[86]     0.2    0.00    0.01 1503285         frystl::static_vector<KSolveNames::MoveSpec, 43u>& frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator=<43u>(frystl::static_vector<KSolveNames::MoveSpec, 43u>&&) [86]
                0.01    0.00 7469510/14098742     frystl::static_vector<KSolveNames::MoveSpec, 43u>::pop_back() [72]
-----------------------------------------------
                0.00    0.00       2/6312414     void KSolveNames::CandidateSolution::ReplaceIfShorter<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&, unsigned int) [111]
                0.00    0.00 6312412/6312414     KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[87]     0.2    0.01    0.00 6312414         std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::empty() const [87]
-----------------------------------------------
                0.00    0.00 1444936/1444936     KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[88]     0.2    0.00    0.00 1444936         void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [88]
                0.00    0.00 1444936/1444936     std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<9u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<9u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<9u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [90]
                0.00    0.00   11081/586775      frystl::static_vector<KSolveNames::MoveSpec, 9u>::pop_back() [150]
-----------------------------------------------
                0.00    0.00 1444936/1444936     std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<9u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<9u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<9u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [90]
[89]     0.2    0.00    0.00 1444936         std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [89]
                0.00    0.00 1444936/1444936     KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [91]
                0.00    0.00    1221/7218862     bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
-----------------------------------------------
                0.00    0.00 1444936/1444936     void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [88]
[90]     0.2    0.00    0.00 1444936         std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<9u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<9u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<9u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [90]
                0.00    0.00 1444936/1444936     std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [89]
-----------------------------------------------
                0.00    0.00 1444936/1444936     std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [89]
[91]     0.2    0.00    0.00 1444936         KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const [91]
                0.00    0.00  585554/7218862     bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
-----------------------------------------------
                0.00    0.00 4130263/4130263     KSolveNames::QMovesTemplate<43u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [84]
[92]     0.1    0.00    0.00 4130263         KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [92]
                0.00    0.00 4130263/13484019     frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [82]
-----------------------------------------------
                0.00    0.00   46236/46236       KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const [30]
[93]     0.0    0.00    0.00   46236         KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT&&) [93]
                0.00    0.00   46236/13484019     frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [82]
                0.00    0.00   46236/46236       KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int, KSolveNames::Card::SuitT) [154]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
[94]     0.0    0.00    0.00       1         KSolveNames::GameStateMemory::GameStateMemory() [94]
                0.00    0.00       1/1           gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reserve(unsigned long) [96]
                0.00    0.00       1/1           std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::array() [222]
-----------------------------------------------
                0.00    0.00       1/1           gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reserve(unsigned long) [96]
[95]     0.0    0.00    0.00       1         gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [95]
                0.00    0.00    2048/11027797     std::mutex::lock() [73]
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [161]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::GameStateMemory::GameStateMemory() [94]
[96]     0.0    0.00    0.00       1         gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reserve(unsigned long) [96]
                0.00    0.00       1/1           gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [95]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[97]     0.0    0.00    0.00       1         void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [97]
                0.00    0.00      77/29229849     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
                0.00    0.00       1/924738      KSolveNames::Game::Deal() [23]
                0.00    0.00      77/77          KSolveNames::Game::IsValid(KSolveNames::MoveSpec) const [108]
                0.00    0.00       1/2           KSolveNames::Game::GameOver() const [201]
-----------------------------------------------
                0.00    0.00       6/39          KSolveNames::Game::Game(KSolveNames::Game const&) [100]
                0.00    0.00      12/39          std::array<KSolveNames::Pile, 4ul>::array(std::array<KSolveNames::Pile, 4ul> const&) [105]
                0.00    0.00      21/39          std::array<KSolveNames::Pile, 7ul>::array(std::array<KSolveNames::Pile, 7ul> const&) [102]
[98]     0.0    0.00    0.00      39         KSolveNames::Pile::Pile(KSolveNames::Pile const&) [98]
                0.00    0.00      39/39          frystl::static_vector<KSolveNames::Card, 24u>::static_vector(frystl::static_vector<KSolveNames::Card, 24u> const&) [99]
-----------------------------------------------
                0.00    0.00      39/39          KSolveNames::Pile::Pile(KSolveNames::Pile const&) [98]
[99]     0.0    0.00    0.00      39         frystl::static_vector<KSolveNames::Card, 24u>::static_vector(frystl::static_vector<KSolveNames::Card, 24u> const&) [99]
                0.00    0.00     156/153560457     KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [18]
-----------------------------------------------
                0.00    0.00       1/3           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
                0.00    0.00       1/3           KSolveNames::WorkerState::WorkerState(KSolveNames::WorkerState const&) [104]
                0.00    0.00       1/3           main [1]
[100]    0.0    0.00    0.00       3         KSolveNames::Game::Game(KSolveNames::Game const&) [100]
                0.00    0.00       3/3           std::array<KSolveNames::Pile, 7ul>::array(std::array<KSolveNames::Pile, 7ul> const&) [102]
                0.00    0.00       3/3           std::array<KSolveNames::Pile, 4ul>::array(std::array<KSolveNames::Pile, 4ul> const&) [105]
                0.00    0.00       6/39          KSolveNames::Pile::Pile(KSolveNames::Pile const&) [98]
                0.00    0.00       3/5           frystl::static_vector<KSolveNames::Card, 52u>::static_vector(frystl::static_vector<KSolveNames::Card, 52u> const&) [195]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[101]    0.0    0.00    0.00       1         KSolveNames::Game::Game(KSolveNames::CardDeck, unsigned int, unsigned int) [101]
                0.00    0.00       1/924738      KSolveNames::Game::Deal() [23]
                0.00    0.00       1/5           frystl::static_vector<KSolveNames::Card, 52u>::static_vector(frystl::static_vector<KSolveNames::Card, 52u> const&) [195]
-----------------------------------------------
                0.00    0.00       3/3           KSolveNames::Game::Game(KSolveNames::Game const&) [100]
[102]    0.0    0.00    0.00       3         std::array<KSolveNames::Pile, 7ul>::array(std::array<KSolveNames::Pile, 7ul> const&) [102]
                0.00    0.00      21/39          KSolveNames::Pile::Pile(KSolveNames::Pile const&) [98]
-----------------------------------------------
                0.00    0.00       1/4           KSolveNames::Worker(KSolveNames::WorkerState*) [4]
                0.00    0.00       1/4           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
                0.00    0.00       2/4           main [1]
[103]    0.0    0.00    0.00       4         KSolveNames::Game::~Game() [103]
                0.00    0.00       4/4           std::array<KSolveNames::Pile, 7ul>::~array() [106]
                0.00    0.00       4/4           std::array<KSolveNames::Pile, 4ul>::~array() [107]
                0.00    0.00      52/153560457     frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
                0.00    0.00     208/312         frystl::static_vector<KSolveNames::Card, 52u>::pop_back() [171]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::Worker(KSolveNames::WorkerState*) [4]
[104]    0.0    0.00    0.00       1         KSolveNames::WorkerState::WorkerState(KSolveNames::WorkerState const&) [104]
                0.00    0.00       1/3           KSolveNames::Game::Game(KSolveNames::Game const&) [100]
                0.00    0.00       1/2           KSolveNames::MoveStorage::MoveStorage(KSolveNames::SharedMoveStorage&) [199]
-----------------------------------------------
                0.00    0.00       3/3           KSolveNames::Game::Game(KSolveNames::Game const&) [100]
[105]    0.0    0.00    0.00       3         std::array<KSolveNames::Pile, 4ul>::array(std::array<KSolveNames::Pile, 4ul> const&) [105]
                0.00    0.00      12/39          KSolveNames::Pile::Pile(KSolveNames::Pile const&) [98]
-----------------------------------------------
                0.00    0.00       4/4           KSolveNames::Game::~Game() [103]
[106]    0.0    0.00    0.00       4         std::array<KSolveNames::Pile, 7ul>::~array() [106]
                0.00    0.00      82/153560457     frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
-----------------------------------------------
                0.00    0.00       4/4           KSolveNames::Game::~Game() [103]
[107]    0.0    0.00    0.00       4         std::array<KSolveNames::Pile, 4ul>::~array() [107]
                0.00    0.00      74/153560457     frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [39]
-----------------------------------------------
                0.00    0.00      77/77          void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [97]
[108]    0.0    0.00    0.00      77         KSolveNames::Game::IsValid(KSolveNames::MoveSpec) const [108]
                0.00    0.00      77/77          KSolveNames::Valid(KSolveNames::Game const&, unsigned int, unsigned int, unsigned int) [110]
                0.00    0.00      19/17664506     KSolveNames::MoveSpec::DrawCount() const [71]
-----------------------------------------------
                0.00    0.00 3176806/3176806     void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&) [54]
[109]    0.0    0.00    0.00 3176806         KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::UpsizeTo(unsigned int) [109]
                0.00    0.00      20/11027797     std::mutex::lock() [73]
                0.00    0.00      20/20          frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::resize(unsigned int) [191]
-----------------------------------------------
                0.00    0.00      77/77          KSolveNames::Game::IsValid(KSolveNames::MoveSpec) const [108]
[110]    0.0    0.00    0.00      77         KSolveNames::Valid(KSolveNames::Game const&, unsigned int, unsigned int, unsigned int) [110]
                0.00    0.00      21/114842361     frystl::static_vector<KSolveNames::Card, 24u>::back() const [45]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[111]    0.0    0.00    0.00       1         void KSolveNames::CandidateSolution::ReplaceIfShorter<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&, unsigned int) [111]
                0.00    0.00       2/6312414     std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::empty() const [87]
                0.00    0.00       1/11027797     std::mutex::lock() [73]
                0.00    0.00       1/1           void std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_assign_aux<KSolveNames::MoveSpec const*>(KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*, std::forward_iterator_tag) [228]
-----------------------------------------------
                0.00    0.00 21414075/21414075     KSolveNames::MoveStorage::LoadMoveSequence() [36]
[118]    0.0    0.00    0.00 21414075         frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_front(KSolveNames::MoveSpec const&) [118]
-----------------------------------------------
                0.00    0.00   21420/17588990     bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
                0.00    0.00 2047533/17588990     KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [29]
                0.00    0.00 15520037/17588990     KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [12]
[119]    0.0    0.00    0.00 17588990         KSolveNames::MoveSpec::FromUpCount() const [119]
-----------------------------------------------
                0.00    0.00 12819599/12819599     KSolveNames::TalonFuture& frystl::static_vector<KSolveNames::TalonFuture, 24u>::emplace_back<KSolveNames::Card, unsigned int&, unsigned int, bool>(KSolveNames::Card&&, unsigned int&, unsigned int&&, bool&&) [60]
[120]    0.0    0.00    0.00 12819599         frystl::static_vector<KSolveNames::TalonFuture, 24u>::back() [120]
-----------------------------------------------
                0.00    0.00 12819599/12819599     KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [22]
[121]    0.0    0.00    0.00 12819599         frystl::static_vector<KSolveNames::TalonFuture, 24u>::pop_back() [121]
-----------------------------------------------
                0.00    0.00 10615316/10615316     bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [47]
[122]    0.0    0.00    0.00 10615316         KSolveNames::XYZ_Test(KSolveNames::MoveSpec, KSolveNames::MoveSpec) [122]
-----------------------------------------------
                0.00    0.00 9143593/9143593     void std::__insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [43]
[123]    0.0    0.00    0.00 9143593         unsigned int* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*) [123]
-----------------------------------------------
                0.00    0.00 6473166/6473166     KSolveNames::Game::Deal() [23]
[124]    0.0    0.00    0.00 6473166         frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int) [124]
-----------------------------------------------
                0.00    0.00 6312412/6312412     std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&) [8]
[125]    0.0    0.00    0.00 6312412         gtl::LockableBaseImpl<std::mutex>::WriteLock::operator=(gtl::LockableBaseImpl<std::mutex>::WriteLock&&) [125]
-----------------------------------------------
                0.00    0.00 6312412/6312412     void std::__sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [33]
[126]    0.0    0.00    0.00 6312412         void std::__introsort_loop<unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>) [126]
-----------------------------------------------
                0.00    0.00      38/5026316     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::end() [181]
                0.00    0.00  924736/5026316     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::back() [142]
                0.00    0.00  924736/5026316     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::pop_back() [143]
                0.00    0.00 3176806/5026316     KSolveNames::Branch& frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::emplace_back<KSolveNames::MoveSpec const&, unsigned int&>(KSolveNames::MoveSpec const&, unsigned int&) [55]
[127]    0.0    0.00    0.00 5026316         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MakeIterator(unsigned long) const [127]
-----------------------------------------------
                0.00    0.00 1849472/5026278     KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop() [67]
                0.00    0.00 3176806/5026278     void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&) [54]
[128]    0.0    0.00    0.00 5026278         frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::operator[](unsigned int) [128]
-----------------------------------------------
                0.00    0.00      38/3181850     KSolveNames::Branch*& std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::emplace_back<KSolveNames::Branch*>(KSolveNames::Branch*&&) [186]
                0.00    0.00    1876/3181850     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Shrink() [169]
                0.00    0.00 3179936/3181850     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Grow(unsigned long) [134]
[129]    0.0    0.00    0.00 3181850         std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::back() [129]
-----------------------------------------------
                0.00    0.00 3176806/3176806     KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
[130]    0.0    0.00    0.00 3176806         KSolveNames::MoveStorage::PushBranch(KSolveNames::MoveSpec, unsigned int) [130]
                0.00    0.00 3176806/3176806     KSolveNames::MoveStorage::MovePair& frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::emplace_back<KSolveNames::MoveSpec&, unsigned int>(KSolveNames::MoveSpec&, unsigned int&&) [131]
-----------------------------------------------
                0.00    0.00 3176806/3176806     KSolveNames::MoveStorage::PushBranch(KSolveNames::MoveSpec, unsigned int) [130]
[131]    0.0    0.00    0.00 3176806         KSolveNames::MoveStorage::MovePair& frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::emplace_back<KSolveNames::MoveSpec&, unsigned int>(KSolveNames::MoveSpec&, unsigned int&&) [131]
                0.00    0.00 3176806/3176806     frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::back() [132]
-----------------------------------------------
                0.00    0.00 3176806/3176806     KSolveNames::MoveStorage::MovePair& frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::emplace_back<KSolveNames::MoveSpec&, unsigned int>(KSolveNames::MoveSpec&, unsigned int&&) [131]
[132]    0.0    0.00    0.00 3176806         frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::back() [132]
-----------------------------------------------
                0.00    0.00 3176806/3176806     KSolveNames::MoveStorage::ShareMoves() [34]
[133]    0.0    0.00    0.00 3176806         frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::pop_back() [133]
-----------------------------------------------
                0.00    0.00 3176806/3176806     KSolveNames::Branch& frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::emplace_back<KSolveNames::MoveSpec const&, unsigned int&>(KSolveNames::MoveSpec const&, unsigned int&) [55]
[134]    0.0    0.00    0.00 3176806         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Grow(unsigned long) [134]
                0.00    0.00 3179936/3181850     std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::back() [129]
                0.00    0.00    3130/3130        std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::push_back(KSolveNames::Branch* const&) [156]
-----------------------------------------------
                0.00    0.00 3160434/3160434     bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [7]
[135]    0.0    0.00    0.00 3160434         gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator::iterator(gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator const&) [135]
-----------------------------------------------
                0.00    0.00 3151978/3151978     bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) [7]
[136]    0.0    0.00    0.00 3151978         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::set_ctrl(unsigned long, signed char) [136]
-----------------------------------------------
                0.00    0.00   52421/1749244     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [153]
                0.00    0.00   52421/1749244     KSolveNames::QMovesTemplate<9u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [152]
                0.00    0.00  534354/1749244     KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const [64]
                0.00    0.00  534354/1749244     KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [66]
                0.00    0.00  575694/1749244     KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[137]    0.0    0.00    0.00 1749244         frystl::static_vector<KSolveNames::MoveSpec, 9u>::back() [137]
-----------------------------------------------
                0.00    0.00 1512288/1512288     void std::__insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [62]
[138]    0.0    0.00    0.00 1512288         KSolveNames::MoveStorage::MovePair* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<KSolveNames::MoveStorage::MovePair, KSolveNames::MoveStorage::MovePair>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*) [138]
-----------------------------------------------
                0.00    0.00  578549/1503285     KSolveNames::MoveStorage::PushStem(KSolveNames::MoveSpec) [151]
                0.00    0.00  924736/1503285     KSolveNames::MoveStorage::LoadMoveSequence() [36]
[139]    0.0    0.00    0.00 1503285         frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_back(KSolveNames::MoveSpec const&) [139]
-----------------------------------------------
                0.00    0.00 1503285/1503285     KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[140]    0.0    0.00    0.00 1503285         KSolveNames::Game::MinFoundationPileSize() const [140]
-----------------------------------------------
                0.00    0.00 1157098/1157098     KSolveNames::WorkerState::MakeAutoMoves() [13]
[141]    0.0    0.00    0.00 1157098         frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator[](unsigned int) [141]
-----------------------------------------------
                0.00    0.00  924736/924736      KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop() [67]
[142]    0.0    0.00    0.00  924736         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::back() [142]
                0.00    0.00  924736/5026316     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MakeIterator(unsigned long) const [127]
-----------------------------------------------
                0.00    0.00  924736/924736      KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop() [67]
[143]    0.0    0.00    0.00  924736         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::pop_back() [143]
                0.00    0.00  924736/5026316     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MakeIterator(unsigned long) const [127]
                0.00    0.00     920/958         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Shrink() [169]
-----------------------------------------------
                0.00    0.00  782264/782264      KSolveNames::MoveStorage::UpdateMoveTree() [68]
[144]    0.0    0.00    0.00  782264         KSolveNames::Branch& std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::emplace_back<KSolveNames::MoveSpec&, unsigned int&>(KSolveNames::MoveSpec&, unsigned int&) [144]
                0.00    0.00  782264/782264      std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::back() [145]
-----------------------------------------------
                0.00    0.00  782264/782264      KSolveNames::Branch& std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::emplace_back<KSolveNames::MoveSpec&, unsigned int&>(KSolveNames::MoveSpec&, unsigned int&) [144]
[145]    0.0    0.00    0.00  782264         std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::back() [145]
-----------------------------------------------
                0.00    0.00  611774/611774      std::ranges::drop_view<std::ranges::ref_view<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > > >::begin() const [148]
[146]    0.0    0.00    0.00  611774         std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>(KSolveNames::MoveSpec*&, std::__detail::__iter_traits::difference_type, KSolveNames::MoveSpec*) const [146]
-----------------------------------------------
                0.00    0.00  611774/611774      KSolveNames::MoveStorage::UpdateMoveTree() [68]
[147]    0.0    0.00    0.00  611774         auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&>(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&) const [147]
-----------------------------------------------
                0.00    0.00  611774/611774      KSolveNames::MoveStorage::UpdateMoveTree() [68]
[148]    0.0    0.00    0.00  611774         std::ranges::drop_view<std::ranges::ref_view<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > > >::begin() const [148]
                0.00    0.00  611774/611774      std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>(KSolveNames::MoveSpec*&, std::__detail::__iter_traits::difference_type, KSolveNames::MoveSpec*) const [146]
-----------------------------------------------
                0.00    0.00  611774/611774      void std::__sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [58]
[149]    0.0    0.00    0.00  611774         void std::__introsort_loop<KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>) [149]
-----------------------------------------------
                0.00    0.00   11081/586775      void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [88]
                0.00    0.00  575694/586775      KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [14]
[150]    0.0    0.00    0.00  586775         frystl::static_vector<KSolveNames::MoveSpec, 9u>::pop_back() [150]
-----------------------------------------------
                0.00    0.00  578549/578549      KSolveNames::WorkerState::MakeAutoMoves() [13]
[151]    0.0    0.00    0.00  578549         KSolveNames::MoveStorage::PushStem(KSolveNames::MoveSpec) [151]
                0.00    0.00  578549/1503285     frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_back(KSolveNames::MoveSpec const&) [139]
-----------------------------------------------
                0.00    0.00   52421/52421       KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const [64]
[152]    0.0    0.00    0.00   52421         KSolveNames::QMovesTemplate<9u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [152]
                0.00    0.00   52421/1749244     frystl::static_vector<KSolveNames::MoveSpec, 9u>::back() [137]
                0.00    0.00   52421/52421       KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [153]
-----------------------------------------------
                0.00    0.00   52421/52421       KSolveNames::QMovesTemplate<9u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [152]
[153]    0.0    0.00    0.00   52421         KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [153]
                0.00    0.00   52421/1749244     frystl::static_vector<KSolveNames::MoveSpec, 9u>::back() [137]
-----------------------------------------------
                0.00    0.00   46236/46236       KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT&&) [93]
[154]    0.0    0.00    0.00   46236         KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int, KSolveNames::Card::SuitT) [154]
-----------------------------------------------
                0.00    0.00    2048/4096        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::destroy_slots() [159]
                0.00    0.00    2048/4096        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
[155]    0.0    0.00    0.00    4096         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::MakeLayout(unsigned long) [155]
-----------------------------------------------
                0.00    0.00    3130/3130        frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Grow(unsigned long) [134]
[156]    0.0    0.00    0.00    3130         std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::push_back(KSolveNames::Branch* const&) [156]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::destroy_slots() [159]
[157]    0.0    0.00    0.00    2048         void gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long) [157]
                0.00    0.00    2048/2048        std::__new_allocator<gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M>::deallocate(gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M*, unsigned long) [167]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
[158]    0.0    0.00    0.00    2048         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reset_ctrl(unsigned long) [158]
-----------------------------------------------
                0.00    0.00    2048/2048        std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::~array() [223]
[159]    0.0    0.00    0.00    2048         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::destroy_slots() [159]
                0.00    0.00    2048/4096        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::MakeLayout(unsigned long) [155]
                0.00    0.00    2048/2048        void gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long) [157]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::resize(unsigned long) [162]
[160]    0.0    0.00    0.00    2048         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
                0.00    0.00    2048/4096        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::MakeLayout(unsigned long) [155]
                0.00    0.00    2048/2048        void* gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long) [164]
                0.00    0.00    2048/2048        std::conditional<is_const_v<char>, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<0ul, char>(char*) const [165]
                0.00    0.00    2048/2048        std::conditional<is_const_v<char>, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<1ul, char>(char*) const [166]
                0.00    0.00    2048/2048        gtl::priv::CapacityToGrowth(unsigned long) [163]
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reset_ctrl(unsigned long) [158]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [95]
[161]    0.0    0.00    0.00    2048         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [161]
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::resize(unsigned long) [162]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [161]
[162]    0.0    0.00    0.00    2048         gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::resize(unsigned long) [162]
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
[163]    0.0    0.00    0.00    2048         gtl::priv::CapacityToGrowth(unsigned long) [163]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
[164]    0.0    0.00    0.00    2048         void* gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long) [164]
                0.00    0.00    2048/2048        std::__new_allocator<gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long)::M>::allocate(unsigned long, void const*) [168]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
[165]    0.0    0.00    0.00    2048         std::conditional<is_const_v<char>, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<0ul, char>(char*) const [165]
-----------------------------------------------
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [160]
[166]    0.0    0.00    0.00    2048         std::conditional<is_const_v<char>, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<1ul, char>(char*) const [166]
-----------------------------------------------
                0.00    0.00    2048/2048        void gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long) [157]
[167]    0.0    0.00    0.00    2048         std::__new_allocator<gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M>::deallocate(gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M*, unsigned long) [167]
-----------------------------------------------
                0.00    0.00    2048/2048        void* gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long) [164]
[168]    0.0    0.00    0.00    2048         std::__new_allocator<gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long)::M>::allocate(unsigned long, void const*) [168]
-----------------------------------------------
                0.00    0.00      38/958         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::clear() [79]
                0.00    0.00     920/958         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::pop_back() [143]
[169]    0.0    0.00    0.00     958         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Shrink() [169]
                0.00    0.00    1876/3181850     std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::back() [129]
-----------------------------------------------
                0.00    0.00      52/312         KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<>() [174]
                0.00    0.00     260/312         KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [172]
[170]    0.0    0.00    0.00     312         frystl::static_vector<KSolveNames::Card, 52u>::back() [170]
-----------------------------------------------
                0.00    0.00     104/312         main [1]
                0.00    0.00     208/312         KSolveNames::Game::~Game() [103]
[171]    0.0    0.00    0.00     312         frystl::static_vector<KSolveNames::Card, 52u>::pop_back() [171]
-----------------------------------------------
                0.00    0.00     260/260         frystl::static_vector<KSolveNames::Card, 52u>::static_vector(frystl::static_vector<KSolveNames::Card, 52u> const&) [195]
[172]    0.0    0.00    0.00     260         KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [172]
                0.00    0.00     260/312         frystl::static_vector<KSolveNames::Card, 52u>::back() [170]
-----------------------------------------------
                0.00    0.00     100/100         KSolveNames::Shuffle(KSolveNames::CardDeck&, unsigned int) [211]
[173]    0.0    0.00    0.00     100         frystl::static_vector<KSolveNames::Card, 52u>::operator[](unsigned int) [173]
-----------------------------------------------
                0.00    0.00      52/52          KSolveNames::NumberedDeal(unsigned int) [209]
[174]    0.0    0.00    0.00      52         KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<>() [174]
                0.00    0.00      52/312         frystl::static_vector<KSolveNames::Card, 52u>::back() [170]
-----------------------------------------------
                0.00    0.00      50/50          unsigned int std::uniform_int_distribution<unsigned int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int) [176]
[175]    0.0    0.00    0.00      50         std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()() [175]
                0.00    0.00       1/1           std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand() [221]
-----------------------------------------------
                0.00    0.00      50/50          unsigned int std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<unsigned int>::param_type const&) [177]
[176]    0.0    0.00    0.00      50         unsigned int std::uniform_int_distribution<unsigned int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int) [176]
                0.00    0.00      50/50          std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()() [175]
-----------------------------------------------
                0.00    0.00      50/50          KSolveNames::Shuffle(KSolveNames::CardDeck&, unsigned int) [211]
[177]    0.0    0.00    0.00      50         unsigned int std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<unsigned int>::param_type const&) [177]
                0.00    0.00      50/50          unsigned int std::uniform_int_distribution<unsigned int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int) [176]
-----------------------------------------------
                0.00    0.00      38/38          frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::resize(unsigned int) [191]
[178]    0.0    0.00    0.00      38         KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT& frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::emplace_back<>() [178]
                0.00    0.00      38/38          void frystl::Construct<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT>(KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT*) [180]
                0.00    0.00      38/38          frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::back() [179]
-----------------------------------------------
                0.00    0.00      38/38          KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT& frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::emplace_back<>() [178]
[179]    0.0    0.00    0.00      38         frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::back() [179]
-----------------------------------------------
                0.00    0.00      38/38          KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT& frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::emplace_back<>() [178]
[180]    0.0    0.00    0.00      38         void frystl::Construct<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT>(KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT*) [180]
                0.00    0.00      38/38          frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::mf_vector() [182]
-----------------------------------------------
                0.00    0.00      38/38          frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::clear() [79]
[181]    0.0    0.00    0.00      38         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::end() [181]
                0.00    0.00      38/5026316     frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MakeIterator(unsigned long) const [127]
-----------------------------------------------
                0.00    0.00      38/38          void frystl::Construct<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT>(KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT*) [180]
[182]    0.0    0.00    0.00      38         frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::mf_vector() [182]
                0.00    0.00      38/38          std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::reserve(unsigned long) [187]
                0.00    0.00      38/38          KSolveNames::Branch*& std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::emplace_back<KSolveNames::Branch*>(KSolveNames::Branch*&&) [186]
-----------------------------------------------
                0.00    0.00      38/38          frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::pop_back() [78]
[183]    0.0    0.00    0.00      38         std::_Vector_base<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::~_Vector_base() [183]
                0.00    0.00      38/38          std::__new_allocator<KSolveNames::Branch*>::deallocate(KSolveNames::Branch**, unsigned long) [184]
-----------------------------------------------
                0.00    0.00      38/38          std::_Vector_base<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::~_Vector_base() [183]
[184]    0.0    0.00    0.00      38         std::__new_allocator<KSolveNames::Branch*>::deallocate(KSolveNames::Branch**, unsigned long) [184]
-----------------------------------------------
                0.00    0.00      38/38          std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::reserve(unsigned long) [187]
[185]    0.0    0.00    0.00      38         std::__new_allocator<KSolveNames::Branch*>::allocate(unsigned long, void const*) [185]
-----------------------------------------------
                0.00    0.00      38/38          frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::mf_vector() [182]
[186]    0.0    0.00    0.00      38         KSolveNames::Branch*& std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::emplace_back<KSolveNames::Branch*>(KSolveNames::Branch*&&) [186]
                0.00    0.00      38/38          decltype (::new ((void*)(0)) KSolveNames::Branch*((declval<KSolveNames::Branch*>)())) std::construct_at<KSolveNames::Branch*, KSolveNames::Branch*>(KSolveNames::Branch**, KSolveNames::Branch*&&) [188]
                0.00    0.00      38/3181850     std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::back() [129]
-----------------------------------------------
                0.00    0.00      38/38          frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::mf_vector() [182]
[187]    0.0    0.00    0.00      38         std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::reserve(unsigned long) [187]
                0.00    0.00      38/38          std::__new_allocator<KSolveNames::Branch*>::allocate(unsigned long, void const*) [185]
-----------------------------------------------
                0.00    0.00      38/38          KSolveNames::Branch*& std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::emplace_back<KSolveNames::Branch*>(KSolveNames::Branch*&&) [186]
[188]    0.0    0.00    0.00      38         decltype (::new ((void*)(0)) KSolveNames::Branch*((declval<KSolveNames::Branch*>)())) std::construct_at<KSolveNames::Branch*, KSolveNames::Branch*>(KSolveNames::Branch**, KSolveNames::Branch*&&) [188]
-----------------------------------------------
                0.00    0.00      33/33          GetSpec(int, char**) [208]
[189]    0.0    0.00    0.00      33         bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [189]
-----------------------------------------------
                0.00    0.00       2/21          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() [320]
                0.00    0.00       6/21          GetSpec(int, char**) [208]
                0.00    0.00      13/21          __tcf_0 [363]
[190]    0.0    0.00    0.00      21         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() [190]
-----------------------------------------------
                0.00    0.00      20/20          KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::UpsizeTo(unsigned int) [109]
[191]    0.0    0.00    0.00      20         frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::resize(unsigned int) [191]
                0.00    0.00      38/38          KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT& frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::emplace_back<>() [178]
-----------------------------------------------
                0.00    0.00      19/19          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [194]
[192]    0.0    0.00    0.00      19         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [192]
                0.00    0.00      19/19          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) [193]
-----------------------------------------------
                0.00    0.00      19/19          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [192]
[193]    0.0    0.00    0.00      19         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long) [193]
-----------------------------------------------
                0.00    0.00       6/19          GetSpec(int, char**) [208]
                0.00    0.00      13/19          __static_initialization_and_destruction_0() [207]
[194]    0.0    0.00    0.00      19         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [194]
                0.00    0.00      19/19          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) [192]
-----------------------------------------------
                0.00    0.00       1/5           KSolveNames::Game::Game(KSolveNames::CardDeck, unsigned int, unsigned int) [101]
                0.00    0.00       1/5           main [1]
                0.00    0.00       3/5           KSolveNames::Game::Game(KSolveNames::Game const&) [100]
[195]    0.0    0.00    0.00       5         frystl::static_vector<KSolveNames::Card, 52u>::static_vector(frystl::static_vector<KSolveNames::Card, 52u> const&) [195]
                0.00    0.00     260/260         KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [172]
-----------------------------------------------
                0.00    0.00       3/3           GetSpec(int, char**) [208]
[196]    0.0    0.00    0.00       3         GetNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [196]
                0.00    0.00       3/3           int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [197]
-----------------------------------------------
                0.00    0.00       3/3           GetNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [196]
[197]    0.0    0.00    0.00       3         int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [197]
                0.00    0.00       3/3           __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [198]
-----------------------------------------------
                0.00    0.00       3/3           int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [197]
[198]    0.0    0.00    0.00       3         __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno() [198]
-----------------------------------------------
                0.00    0.00       1/2           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
                0.00    0.00       1/2           KSolveNames::WorkerState::WorkerState(KSolveNames::WorkerState const&) [104]
[199]    0.0    0.00    0.00       2         KSolveNames::MoveStorage::MoveStorage(KSolveNames::SharedMoveStorage&) [199]
-----------------------------------------------
                0.00    0.00       1/2           KSolveNames::Worker(KSolveNames::WorkerState*) [4]
                0.00    0.00       1/2           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
[200]    0.0    0.00    0.00       2         KSolveNames::MoveStorage::~MoveStorage() [200]
-----------------------------------------------
                0.00    0.00       1/2           KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) [5]
                0.00    0.00       1/2           void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [97]
[201]    0.0    0.00    0.00       2         KSolveNames::Game::GameOver() const [201]
                0.00    0.00       2/2           KSolveNames::Pile const* std::__find_if<KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}> >(KSolveNames::Pile const*, KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}>, std::random_access_iterator_tag) [206]
-----------------------------------------------
                0.00    0.00       1/2           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
                0.00    0.00       1/2           main [1]
[202]    0.0    0.00    0.00       2         std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::~_Vector_base() [202]
                0.00    0.00       2/2           std::__new_allocator<KSolveNames::MoveSpec>::deallocate(KSolveNames::MoveSpec*, unsigned long) [203]
-----------------------------------------------
                0.00    0.00       2/2           std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::~_Vector_base() [202]
[203]    0.0    0.00    0.00       2         std::__new_allocator<KSolveNames::MoveSpec>::deallocate(KSolveNames::MoveSpec*, unsigned long) [203]
-----------------------------------------------
                0.00    0.00       1/2           std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_create_storage(unsigned long) [216]
                0.00    0.00       1/2           KSolveNames::MoveSpec* std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_allocate_and_copy<KSolveNames::MoveSpec const*>(unsigned long, KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*) [229]
[204]    0.0    0.00    0.00       2         std::__new_allocator<KSolveNames::MoveSpec>::allocate(unsigned long, void const*) [204]
-----------------------------------------------
                0.00    0.00       2/2           KSolveNames::Shuffle(KSolveNames::CardDeck&, unsigned int) [211]
[205]    0.0    0.00    0.00       2         std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long) [205]
-----------------------------------------------
                0.00    0.00       2/2           KSolveNames::Game::GameOver() const [201]
[206]    0.0    0.00    0.00       2         KSolveNames::Pile const* std::__find_if<KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}> >(KSolveNames::Pile const*, KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}>, std::random_access_iterator_tag) [206]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZNK11KSolveNames4Card8AsStringB5cxx11Ev [234]
[207]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0() [207]
                0.00    0.00      13/19          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [194]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[208]    0.0    0.00    0.00       1         GetSpec(int, char**) [208]
                0.00    0.00      33/33          bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [189]
                0.00    0.00       6/19          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) [194]
                0.00    0.00       6/21          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose() [190]
                0.00    0.00       3/3           GetNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [196]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[209]    0.0    0.00    0.00       1         KSolveNames::NumberedDeal(unsigned int) [209]
                0.00    0.00      52/52          KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<>() [174]
                0.00    0.00       1/1           KSolveNames::Shuffle(KSolveNames::CardDeck&, unsigned int) [211]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
[210]    0.0    0.00    0.00       1         KSolveNames::SharedMoveStorage::SharedMoveStorage(unsigned long, unsigned int) [210]
                0.00    0.00       1/1           std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::reserve(unsigned long) [226]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::NumberedDeal(unsigned int) [209]
[211]    0.0    0.00    0.00       1         KSolveNames::Shuffle(KSolveNames::CardDeck&, unsigned int) [211]
                0.00    0.00     100/100         frystl::static_vector<KSolveNames::Card, 52u>::operator[](unsigned int) [173]
                0.00    0.00      50/50          unsigned int std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<unsigned int>::param_type const&) [177]
                0.00    0.00       2/2           std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long) [205]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[212]    0.0    0.00    0.00       1         unsigned int KSolveNames::MoveCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [212]
-----------------------------------------------
                0.00    0.00       1/1           std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const [214]
[213]    0.0    0.00    0.00       1         std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const [213]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[214]    0.0    0.00    0.00       1         std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const [214]
                0.00    0.00       1/1           std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const [213]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~vector() [227]
[215]    0.0    0.00    0.00       1         std::_Vector_base<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~_Vector_base() [215]
                0.00    0.00       1/1           std::__new_allocator<KSolveNames::Branch>::deallocate(KSolveNames::Branch*, unsigned long) [218]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::vector(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [230]
[216]    0.0    0.00    0.00       1         std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_create_storage(unsigned long) [216]
                0.00    0.00       1/2           std::__new_allocator<KSolveNames::MoveSpec>::allocate(unsigned long, void const*) [204]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::~vector() [232]
[217]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [217]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~_Vector_base() [215]
[218]    0.0    0.00    0.00       1         std::__new_allocator<KSolveNames::Branch>::deallocate(KSolveNames::Branch*, unsigned long) [218]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::reserve(unsigned long) [226]
[219]    0.0    0.00    0.00       1         std::__new_allocator<KSolveNames::Branch>::allocate(unsigned long, void const*) [219]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::vector(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [230]
[220]    0.0    0.00    0.00       1         KSolveNames::MoveSpec* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*) [220]
-----------------------------------------------
                0.00    0.00       1/1           std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()() [175]
[221]    0.0    0.00    0.00       1         std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand() [221]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::GameStateMemory::GameStateMemory() [94]
[222]    0.0    0.00    0.00       1         std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::array() [222]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
[223]    0.0    0.00    0.00       1         std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::~array() [223]
                0.00    0.00    2048/2048        gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::destroy_slots() [159]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[224]    0.0    0.00    0.00       1         std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&) [224]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[225]    0.0    0.00    0.00       1         std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&) [225]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::SharedMoveStorage::SharedMoveStorage(unsigned long, unsigned int) [210]
[226]    0.0    0.00    0.00       1         std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::reserve(unsigned long) [226]
                0.00    0.00       1/1           std::__new_allocator<KSolveNames::Branch>::allocate(unsigned long, void const*) [219]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::SharedMoveStorage::~SharedMoveStorage() [80]
[227]    0.0    0.00    0.00       1         std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~vector() [227]
                0.00    0.00       1/1           std::_Vector_base<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~_Vector_base() [215]
-----------------------------------------------
                0.00    0.00       1/1           void KSolveNames::CandidateSolution::ReplaceIfShorter<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&, unsigned int) [111]
[228]    0.0    0.00    0.00       1         void std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_assign_aux<KSolveNames::MoveSpec const*>(KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*, std::forward_iterator_tag) [228]
                0.00    0.00       1/1           KSolveNames::MoveSpec* std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_allocate_and_copy<KSolveNames::MoveSpec const*>(unsigned long, KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*) [229]
-----------------------------------------------
                0.00    0.00       1/1           void std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_assign_aux<KSolveNames::MoveSpec const*>(KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*, std::forward_iterator_tag) [228]
[229]    0.0    0.00    0.00       1         KSolveNames::MoveSpec* std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_allocate_and_copy<KSolveNames::MoveSpec const*>(unsigned long, KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*) [229]
                0.00    0.00       1/2           std::__new_allocator<KSolveNames::MoveSpec>::allocate(unsigned long, void const*) [204]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [2]
[230]    0.0    0.00    0.00       1         std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::vector(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [230]
                0.00    0.00       1/1           std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_create_storage(unsigned long) [216]
                0.00    0.00       1/1           KSolveNames::MoveSpec* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*) [220]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&) [3]
[231]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::reserve(unsigned long) [231]
-----------------------------------------------
                0.00    0.00       1/1           KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&) [3]
[232]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::~vector() [232]
                0.00    0.00       1/1           void std::_Destroy<std::thread*>(std::thread*, std::thread*) [233]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [217]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::~vector() [232]
[233]    0.0    0.00    0.00       1         void std::_Destroy<std::thread*>(std::thread*, std::thread*) [233]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2024 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

 [207] __static_initialization_and_destruction_0() (Game.cpp) [164] void* gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long) [89] std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const (ranges_algo.h)
 [208] GetSpec(int, char**)  [118] frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_front(KSolveNames::MoveSpec const&) [50] std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<43u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<43u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<43u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<43u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const (ranges_algo.h)
 [196] GetNumber(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [139] frystl::static_deque<KSolveNames::MoveSpec, 500u>::push_back(KSolveNames::MoveSpec const&) [90] std::__conditional<borrowed_range<KSolveNames::QMovesTemplate<9u>&> >::type<std::ranges::subrange<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), (sized_sentinel_for<decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)())), decltype (__begin((declval<KSolveNames::QMovesTemplate<9u>&>)()))>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)>, std::ranges::dangling> std::ranges::__remove_if_fn::operator()<KSolveNames::QMovesTemplate<9u>&, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::QMovesTemplate<9u>&, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const (ranges_algo.h)
   [2] KSolveNames::KSolveAStar(KSolveNames::Game&, unsigned int, unsigned int) [131] KSolveNames::MoveStorage::MovePair& frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::emplace_back<KSolveNames::MoveSpec&, unsigned int>(KSolveNames::MoveSpec&, unsigned int&&) [70] auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::Pile const&>(KSolveNames::Pile const&) const
 [130] KSolveNames::MoveStorage::PushBranch(KSolveNames::MoveSpec, unsigned int) [132] frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::back() [147] auto std::ranges::views::__adaptor::_Partial<std::ranges::views::_Drop, unsigned int>::operator()<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&>(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> >&) const
  [34] KSolveNames::MoveStorage::ShareMoves() [133] frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>::pop_back() [56] std::__conditional<borrowed_range<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&> >::type<decltype (__begin((declval<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&>)())), std::ranges::dangling> std::ranges::__sort_fn::operator()<frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(frystl::static_vector<KSolveNames::MoveStorage::MovePair, 32u>&, std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*) const
  [38] KSolveNames::MoveStorage::UpdateFringe(unsigned int) [60] KSolveNames::TalonFuture& frystl::static_vector<KSolveNames::TalonFuture, 24u>::emplace_back<KSolveNames::Card, unsigned int&, unsigned int, bool>(KSolveNames::Card&&, unsigned int&, unsigned int&&, bool&&) [24] std::ranges::drop_view<std::ranges::ref_view<KSolveNames::Pile const> >::begin() const
  [10] KSolveNames::MoveStorage::PopNextBranch(KSolveNames::Game&) [120] frystl::static_vector<KSolveNames::TalonFuture, 24u>::back() [148] std::ranges::drop_view<std::ranges::ref_view<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > > >::begin() const
  [68] KSolveNames::MoveStorage::UpdateMoveTree() [121] frystl::static_vector<KSolveNames::TalonFuture, 24u>::pop_back() [87] std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::empty() const
  [36] KSolveNames::MoveStorage::LoadMoveSequence() [178] KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT& frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::emplace_back<>() [215] std::_Vector_base<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~_Vector_base()
 [151] KSolveNames::MoveStorage::PushStem(KSolveNames::MoveSpec) [179] frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::back() [216] std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_create_storage(unsigned long)
 [199] KSolveNames::MoveStorage::MoveStorage(KSolveNames::SharedMoveStorage&) [191] frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::resize(unsigned int) [202] std::_Vector_base<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::~_Vector_base()
 [200] KSolveNames::MoveStorage::~MoveStorage() [78] frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::pop_back() [183] std::_Vector_base<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::~_Vector_base()
  [13] KSolveNames::WorkerState::MakeAutoMoves() [128] frystl::static_vector<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT, 512u>::operator[](unsigned int) [217] std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base()
 [104] KSolveNames::WorkerState::WorkerState(KSolveNames::WorkerState const&) [18] KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 24u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [218] std::__new_allocator<KSolveNames::Branch>::deallocate(KSolveNames::Branch*, unsigned long)
 [209] KSolveNames::NumberedDeal(unsigned int) [31] frystl::static_vector<KSolveNames::Card, 24u>::back() [219] std::__new_allocator<KSolveNames::Branch>::allocate(unsigned long, void const*)
  [97] void KSolveNames::TestSolution<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(KSolveNames::Game, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [46] void frystl::static_vector<KSolveNames::Card, 24u>::assign<std::reverse_iterator<KSolveNames::Card const*>, void>(std::reverse_iterator<KSolveNames::Card const*>, std::reverse_iterator<KSolveNames::Card const*>) [203] std::__new_allocator<KSolveNames::MoveSpec>::deallocate(KSolveNames::MoveSpec*, unsigned long)
  [41] unsigned int KSolveNames::MisorderCount<KSolveNames::Card const*>(KSolveNames::Card const*, KSolveNames::Card const*) [42] frystl::static_vector<KSolveNames::Card, 24u>::resize(unsigned int) [204] std::__new_allocator<KSolveNames::MoveSpec>::allocate(unsigned long, void const*)
  [84] KSolveNames::QMovesTemplate<43u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [39] frystl::static_vector<KSolveNames::Card, 24u>::pop_back() [184] std::__new_allocator<KSolveNames::Branch*>::deallocate(KSolveNames::Branch**, unsigned long)
 [152] KSolveNames::QMovesTemplate<9u>::AddStockMove(KSolveNames::PileCodeT, unsigned int, int, bool) [99] frystl::static_vector<KSolveNames::Card, 24u>::static_vector(frystl::static_vector<KSolveNames::Card, 24u> const&) [185] std::__new_allocator<KSolveNames::Branch*>::allocate(unsigned long, void const*)
   [6] KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int) [124] frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int) [167] std::__new_allocator<gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M>::deallocate(gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long)::M*, unsigned long)
  [94] KSolveNames::GameStateMemory::GameStateMemory() [174] KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<>() [168] std::__new_allocator<gtl::Allocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, unsigned long)::M>::allocate(unsigned long, void const*)
  [37] KSolveNames::MinimumMovesLeft(KSolveNames::Game const&) [172] KSolveNames::Card& frystl::static_vector<KSolveNames::Card, 52u>::emplace_back<KSolveNames::Card const&>(KSolveNames::Card const&) [138] KSolveNames::MoveStorage::MovePair* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<KSolveNames::MoveStorage::MovePair, KSolveNames::MoveStorage::MovePair>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*)
 [111] void KSolveNames::CandidateSolution::ReplaceIfShorter<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&, unsigned int) [170] frystl::static_vector<KSolveNames::Card, 52u>::back() [123] unsigned int* std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<unsigned int, unsigned int>(unsigned int*, unsigned int*, unsigned int*)
 [210] KSolveNames::SharedMoveStorage::SharedMoveStorage(unsigned long, unsigned int) [171] frystl::static_vector<KSolveNames::Card, 52u>::pop_back() [220] KSolveNames::MoveSpec* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::MoveSpec*)
  [80] KSolveNames::SharedMoveStorage::~SharedMoveStorage() [195] frystl::static_vector<KSolveNames::Card, 52u>::static_vector(frystl::static_vector<KSolveNames::Card, 52u> const&) [221] std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::_M_gen_rand()
  [67] KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Pop() [173] frystl::static_vector<KSolveNames::Card, 52u>::operator[](unsigned int) [205] std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::seed(unsigned long)
  [54] void KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::Emplace<KSolveNames::MoveSpec const&, unsigned int&>(unsigned int, KSolveNames::MoveSpec const&, unsigned int&) [69] KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::MoveSpec const&>(KSolveNames::MoveSpec const&) [175] std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()
 [109] KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::UpsizeTo(unsigned int) [92] KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [176] unsigned int std::uniform_int_distribution<unsigned int>::_S_nd<unsigned long, std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, unsigned int>(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, unsigned int)
  [29] KSolveNames::Game::UnMakeMove(KSolveNames::MoveSpec) [83] KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [177] unsigned int std::uniform_int_distribution<unsigned int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<unsigned int>::param_type const&)
  [14] KSolveNames::QMovesTemplate<43u> KSolveNames::Game::AvailableMoves<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) [93] KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 43u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&, KSolveNames::Card::SuitT&&) [105] std::array<KSolveNames::Pile, 4ul>::array(std::array<KSolveNames::Pile, 4ul> const&)
  [23] KSolveNames::Game::Deal() [82] frystl::static_vector<KSolveNames::MoveSpec, 43u>::back() [107] std::array<KSolveNames::Pile, 4ul>::~array()
  [12] KSolveNames::Game::MakeMove(KSolveNames::MoveSpec) [72] frystl::static_vector<KSolveNames::MoveSpec, 43u>::pop_back() [102] std::array<KSolveNames::Pile, 7ul>::array(std::array<KSolveNames::Pile, 7ul> const&)
 [101] KSolveNames::Game::Game(KSolveNames::CardDeck, unsigned int, unsigned int) [86] frystl::static_vector<KSolveNames::MoveSpec, 43u>& frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator=<43u>(frystl::static_vector<KSolveNames::MoveSpec, 43u>&&) [106] std::array<KSolveNames::Pile, 7ul>::~array()
 [100] KSolveNames::Game::Game(KSolveNames::Game const&) [141] frystl::static_vector<KSolveNames::MoveSpec, 43u>::operator[](unsigned int) [222] std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::array()
 [103] KSolveNames::Game::~Game() [153] KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, unsigned int&, int&>(KSolveNames::PileCodeT&, unsigned int&, int&) [223] std::array<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner, 2048ul>::~array()
  [53] KSolveNames::Pile::Pop() [66] KSolveNames::MoveSpec& frystl::static_vector<KSolveNames::MoveSpec, 9u>::emplace_back<KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&>(KSolveNames::PileCodeT&, KSolveNames::PileCodeT&, unsigned int&, unsigned int&) [73] std::mutex::lock()
  [21] KSolveNames::Pile::Draw(KSolveNames::Pile&) [137] frystl::static_vector<KSolveNames::MoveSpec, 9u>::back() [224] std::chrono::duration<double, std::ratio<1l, 1000l> >::duration<long, std::ratio<1l, 1000000000l>, void>(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)
  [20] KSolveNames::Pile::Draw(KSolveNames::Pile&, int) [150] frystl::static_vector<KSolveNames::MoveSpec, 9u>::pop_back() [225] std::common_type<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >::type std::chrono::operator-<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&, std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)
  [28] KSolveNames::Pile::Take(KSolveNames::Pile&, unsigned int) [180] void frystl::Construct<KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT>(KSolveNames::ShareableIndexedPriorityQueue<unsigned int, KSolveNames::Branch, 512u>::ProtectedStackT*) [144] KSolveNames::Branch& std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::emplace_back<KSolveNames::MoveSpec&, unsigned int&>(KSolveNames::MoveSpec&, unsigned int&)
  [98] KSolveNames::Pile::Pile(KSolveNames::Pile const&) [76] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MFV_Iterator<false>::Increment() [145] std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::back()
 [211] KSolveNames::Shuffle(KSolveNames::CardDeck&, unsigned int) [55] KSolveNames::Branch& frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::emplace_back<KSolveNames::MoveSpec const&, unsigned int&>(KSolveNames::MoveSpec const&, unsigned int&) [226] std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::reserve(unsigned long)
  [75] KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int) [181] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::end() [227] std::vector<KSolveNames::Branch, std::allocator<KSolveNames::Branch> >::~vector()
 [154] KSolveNames::MoveSpec::MoveSpec(KSolveNames::PileCodeT, KSolveNames::PileCodeT, unsigned int, unsigned int, KSolveNames::Card::SuitT) [134] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Grow(unsigned long) [228] void std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_assign_aux<KSolveNames::MoveSpec const*>(KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*, std::forward_iterator_tag)
  [11] KSolveNames::GameState::GameState(KSolveNames::Game const&, unsigned int) [142] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::back() [229] KSolveNames::MoveSpec* std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::_M_allocate_and_copy<KSolveNames::MoveSpec const*>(unsigned long, KSolveNames::MoveSpec const*, KSolveNames::MoveSpec const*)
 [212] unsigned int KSolveNames::MoveCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&) [79] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::clear() [230] std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> >::vector(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)
   [3] KSolveNames::RunWorkers(unsigned int, KSolveNames::WorkerState&) (KSolveAStar.cpp) [169] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::Shrink() [186] KSolveNames::Branch*& std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::emplace_back<KSolveNames::Branch*>(KSolveNames::Branch*&&)
  [35] KSolveNames::TalonCards(KSolveNames::Game const&) (Game.cpp) [143] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::pop_back() [129] std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::back()
  [48] void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) (KSolveAStar.cpp) [182] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::mf_vector() [187] std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::reserve(unsigned long)
  [88] void KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) (KSolveAStar.cpp) [197] int __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int) [156] std::vector<KSolveNames::Branch*, std::allocator<KSolveNames::Branch*> >::push_back(KSolveNames::Branch* const&)
  [16] KSolveNames::DeflateTableau(KSolveNames::Pile const&) (GameStateMemory.cpp) [15] KSolveNames::MoveStorage::MakeSequenceMoves(KSolveNames::Game&) const [231] std::vector<std::thread, std::allocator<std::thread> >::reserve(unsigned long)
 [110] KSolveNames::Valid(KSolveNames::Game const&, unsigned int, unsigned int, unsigned int) (Game.cpp) [22] KSolveNames::Game::MovesFromTalon(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [232] std::vector<std::thread, std::allocator<std::thread> >::~vector()
   [4] KSolveNames::Worker(KSolveNames::WorkerState*) (KSolveAStar.cpp) [30] KSolveNames::Game::MovesFromTableau(KSolveNames::QMovesTemplate<43u>&) const [190] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose()
   [5] KSolveNames::Advance(KSolveNames::WorkerState&, unsigned int) (KSolveAStar.cpp) [85] KSolveNames::Game::MovesFromFoundation(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [192] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
  [47] bool KSolveNames::XYZ_Move<KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::MoveSpec, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&) (KSolveAStar.cpp) [140] KSolveNames::Game::MinFoundationPileSize() const [193] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_copy(char*, char const*, unsigned long)
 [122] KSolveNames::XYZ_Test(KSolveNames::MoveSpec, KSolveNames::MoveSpec) (KSolveAStar.cpp) [64] KSolveNames::Game::DominantAvailableMoves(KSolveNames::QMovesTemplate<9u>&, unsigned int) const [194] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
 [157] void gtl::Deallocate<8ul, std::allocator<KSolveNames::GameState> >(std::allocator<KSolveNames::GameState>*, void*, unsigned long) [17] KSolveNames::Game::NonDominantAvailableMoves(KSolveNames::QMovesTemplate<43u>&, unsigned int) const [27] decltype (::new ((void*)(0)) KSolveNames::GameState((declval<KSolveNames::GameState const&>)())) std::construct_at<KSolveNames::GameState, KSolveNames::GameState const&>(KSolveNames::GameState*, KSolveNames::GameState const&)
 [125] gtl::LockableBaseImpl<std::mutex>::WriteLock::operator=(gtl::LockableBaseImpl<std::mutex>::WriteLock&&) [108] KSolveNames::Game::IsValid(KSolveNames::MoveSpec) const [188] decltype (::new ((void*)(0)) KSolveNames::Branch*((declval<KSolveNames::Branch*>)())) std::construct_at<KSolveNames::Branch*, KSolveNames::Branch*>(KSolveNames::Branch**, KSolveNames::Branch*&&)
 [155] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::MakeLayout(unsigned long) [201] KSolveNames::Game::GameOver() const [62] void std::__insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
 [158] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reset_ctrl(unsigned long) [119] KSolveNames::MoveSpec::FromUpCount() const [43] void std::__insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
 [159] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::destroy_slots() [71] KSolveNames::MoveSpec::DrawCount() const [149] void std::__introsort_loop<KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
  [59] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::prepare_insert(unsigned long) [52] KSolveNames::TalonSim::TopCard() const [126] void std::__introsort_loop<unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, long, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
  [25] void gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_at<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(unsigned long&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) (phmap.hpp) [19] KSolveNames::GameState::operator==(KSolveNames::GameState const&) const [63] void std::__final_insertion_sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
 [160] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::initialize_slots(unsigned long) [26] auto const& gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor::operator()<KSolveNames::GameState const&>(KSolveNames::GameState const&) const [44] void std::__final_insertion_sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
  [65] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_first_non_full(unsigned long) [165] std::conditional<is_const_v<char>, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<0ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<0ul, char>(char*) const [77] void std::__unguarded_linear_insert<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Val_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
 [161] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [166] std::conditional<is_const_v<char>, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type const, std::tuple_element<1ul, std::tuple<signed char, KSolveNames::GameState> >::type>::type* gtl::priv::internal_layout::LayoutImpl<std::tuple<signed char, KSolveNames::GameState>, std::integer_sequence<unsigned long, 0ul, 1ul>, std::integer_sequence<unsigned long, 0ul, 1ul> >::Pointer<1ul, char>(char*) const [57] void std::sort<KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1})
 [162] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::resize(unsigned long) [45] frystl::static_vector<KSolveNames::Card, 24u>::back() const [32] void std::sort<unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>(unsigned int*, unsigned int*, std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1})
 [136] gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::set_ctrl(unsigned long, signed char) [74] frystl::static_vector<KSolveNames::Card, 24u>::operator[](unsigned int) const [58] void std::__sort<KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}> >(KSolveNames::MoveStorage::MovePair*, KSolveNames::MoveStorage::MovePair*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::greater, unsigned int KSolveNames::MoveStorage::MovePair::*>(std::ranges::greater&, unsigned int KSolveNames::MoveStorage::MovePair::*&)::{lambda(auto:1&&, auto:2&&)#1}>)
   [9] unsigned long gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::_find_key<KSolveNames::GameState>(KSolveNames::GameState const&, unsigned long) [127] frystl::mf_vector<KSolveNames::Branch, 1024u, 1024ul>::MakeIterator(unsigned long) const [33] void std::__sort<unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}> >(unsigned int*, unsigned int*, __gnu_cxx::__ops::_Iter_comp_iter<std::ranges::__detail::__make_comp_proj<std::ranges::less, std::identity>(std::ranges::less&, std::identity&)::{lambda(auto:1&&, auto:2&&)#1}>)
 [163] gtl::priv::CapacityToGrowth(unsigned long) [40] std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::Card const*, KSolveNames::Card const*>(KSolveNames::Card const*&, std::__detail::__iter_traits::difference_type, KSolveNames::Card const*) const [233] void std::_Destroy<std::thread*>(std::thread*, std::thread*)
   [7] bool gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::lazy_emplace_l<KSolveNames::GameState, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}>(KSolveNames::GameState const&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(auto:1&)#1}&&, KSolveNames::GameStateMemory::IsShortPathToState(KSolveNames::Game const&, unsigned int)::{lambda(gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::constructor const&)#1}&&) (phmap.hpp) [146] std::__detail::__iter_traits::difference_type std::ranges::__advance_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>(KSolveNames::MoveSpec*&, std::__detail::__iter_traits::difference_type, KSolveNames::MoveSpec*) const [206] KSolveNames::Pile const* std::__find_if<KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}> >(KSolveNames::Pile const*, KSolveNames::Pile const*, __gnu_cxx::__ops::_Iter_negate<KSolveNames::Game::GameOver() const::{lambda(auto:1 const&)#1}>, std::random_access_iterator_tag) (Game.cpp)
   [8] std::tuple<gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, unsigned long, bool> gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::find_or_prepare_insert_with_hash<KSolveNames::GameState>(unsigned long, KSolveNames::GameState const&, gtl::LockableBaseImpl<std::mutex>::WriteLock&) [51] KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const (ranges_util.h) [189] bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
  [95] gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::rehash(unsigned long) [91] KSolveNames::MoveSpec* std::ranges::__find_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<9u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<9u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const (ranges_util.h) [198] __gnu_cxx::__stoa<long, int, char, int>(long (*)(char const*, char**, int), char const*, char const*, unsigned long*, int)::_Save_errno::~_Save_errno()
  [96] gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::reserve(unsigned long) [213] std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(__gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, __gnu_cxx::__normal_iterator<KSolveNames::MoveSpec const*, std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const [81] _init
 [135] gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator::iterator(gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::parallel_hash_set<11ul, gtl::priv::raw_hash_set, std::mutex, gtl::priv::empty, gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::Inner*, gtl::priv::raw_hash_set<gtl::priv::FlatHashSetPolicy<KSolveNames::GameState>, KSolveNames::Hasher, gtl::EqualTo<KSolveNames::GameState>, std::allocator<KSolveNames::GameState> >::iterator const&) [214] std::__detail::__iter_traits::difference_type std::ranges::__count_if_fn::operator()<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, std::identity, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}>(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&, KSolveNames::RecycleCount<std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > >(std::vector<KSolveNames::MoveSpec, std::allocator<KSolveNames::MoveSpec> > const&)::{lambda(auto:1)#1}, std::identity) const
  [61] gtl::priv::probe_seq<16ul>::probe_seq(unsigned long, unsigned long) [49] std::ranges::subrange<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, (sized_sentinel_for<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*>)?((std::ranges::subrange_kind)1) : ((std::ranges::subrange_kind)0)> std::ranges::__remove_if_fn::operator()<KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, std::identity, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}>(KSolveNames::MoveSpec*, KSolveNames::MoveSpec*, KSolveNames::XYZ_Filter<KSolveNames::QMovesTemplate<43u>, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > >(KSolveNames::QMovesTemplate<43u>&, KSolveNames::MoveCounter<frystl::static_deque<KSolveNames::MoveSpec, 500u> > const&)::{lambda(KSolveNames::MoveSpec)#1}, std::identity) const (ranges_algo.h)
