{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "shell",
			"label": "C/C++:  g++ build KSolve",
			"command": "g++",
			"args": [
				"-g",
			//	"-m32",
			//	"-pg",
				"-O3",
				"-Wno-placement-new",
				"-DFRYSTL_DEBUG",
				//	"-DNDEBUG",
				"-pthread",
				"Game.cpp",
				"KSolveAStar.cpp",
				"GameStateMemory.cpp",
				"KSolve.cpp", 
				"-o",
				"${workspaceFolder}/KSolve"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			}, 
			"problemMatcher": [
				"$gcc"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		{
			"type": "shell",
			"label": "C/C++:  g++ build KSolve2Solvitaire",
			"command": "g++",
			"args": [
				"-g",
			//	"-m32",
			//	"-pg",
				"-O3",
				"-Wno-placement-new",
				"-DFRYSTL_DEBUG",
				//	"-DNDEBUG",
				"-pthread",
				"Game.cpp",
				"KSolve2Solvitaire.cpp", 
				"-o",
				"${workspaceFolder}/KSolve2Solvitaire"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			}, 
			"problemMatcher": [
				"$gcc"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		{
			"type": "shell",
			"label": "C/C++:  g++ build and run unittests",
			"command": "g++",
			"args": [
				"-DFRYSTL_DEBUG",
				"-g",
				"-Wno-placement-new",
				"-pthread",
				"Game.cpp",
				"KSolveAStar.cpp",
				"GameStateMemory.cpp",
				"unittests.cpp",
				"-o","${workspaceFolder}/unittests"
				,"&&","./unittests"
				,"||","echo","'<<<FAILED>>>'"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"problemMatcher": [
				"$gcc"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		{
			"type": "shell",
			"label": "C/C++:  g++ build ran",
			"command": "g++",
			"args": [
				"-g",
			//	"-pg", "-O1",	// gprof profiling
				"-pthread",
				"-O3",
				"-Wno-placement-new",
			//	"-DNDEBUG",		// comment out to activate assert()
				"-DFRYSTL_DEBUG",// uncomment to activate FRYSTL_ASSERT()
			//	"-O","-Wall",	// for valgrind builds
				"Game.cpp",
				"KSolveAStar.cpp",
				"GameStateMemory.cpp",
				"ran.cpp",
				"-o",
				"${workspaceFolder}/ran"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"problemMatcher": [
				"$gcc"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		{
			"type": "shell",
			"label": "C/C++: cl.exe build active file",
			"command": "cl.exe",
			"args": [
				"/Zi",
				"/EHsc",
				"/Fe:",
				"${fileDirname}\\${fileBasenameNoExtension}.exe",
				"${file}"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"problemMatcher": [
				"$msCompile"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},		{
			"type": "shell",
			"label": "C/C++: cl.exe build unittests",
			"command": "cl.exe",
			"args": [
				"/Zi",			// debug information format
				"/EHsc",		// Exception handling options
				"/Fe:",			// name EXE file
				"${workspaceFolder}\\unittests.exe",
				"Game.cpp",
				"KSolveAStar.cpp",
				"GameStateMemory.cpp",
				"unittests.cpp" 
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"problemMatcher": [
				"$msCompile"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		},
		{
		"type": "shell",
		"label": "C/C++: cl.exe build KSolve",
		"command": "cl.exe",
		"args": [
			"/Zi",			// debug information format
			"/EHsc",		// Exception handling options
			"/O2",			// maximize speed
			"/utf-8",
			"/GL",			// Optimize across whole program
			"/Fe:",			// name EXE file
			"${workspaceFolder}\\KSolve.exe",
			"Game.cpp",
			"KSolveAStar.cpp",
			"GameStateMemory.cpp",
			"KSolve.cpp" 
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"problemMatcher": [
			"$msCompile"
		],
		"group": {
			"kind": "build",
			"isDefault": true
		}
	},
	{
		"type": "shell",
		"label": "C/C++: cl.exe build ran",
		"command": "cl.exe",
		"args": [
			"/Zi",			// debug information format
			"/EHsc",		// Exception handling options
			"/O2",			// maximize speed
			"/utf-8",
			"/GL",			// Optimize across whole program
			"/Fe:",			// name EXE file
			"${workspaceFolder}\\ran.exe",
			"Game.cpp",
			"KSolveAStar.cpp",
			"GameStateMemory.cpp",
			"ran.cpp" 
		],
		"options": {
			"cwd": "${workspaceFolder}"
		},
		"problemMatcher": [  
			"$msCompile"
		],
		"group": {
			"kind": "build",
			"isDefault": true
		}
	}
]
}